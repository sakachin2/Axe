//*CID://+vc2nR~:                             update#=  287;       //~vc2nR~
//******************************************************************
//vc2n 2020/08/03 Dump.e when selected null on popup               //~vc2nI~
//vc2m 2020/08/03 show modifier effective for caps,Sym,Fn,AltG,AltGS on AxeKbd//~vc2mI~
//vc12 2020/06/14 clipRect(rectF,OP_REPLACE) deprecated at android.P//~vc12I~
//vak1:130822 Axe:display flicked key label                        //~vak1I~
//vak0:130822 Axe:Axe Keyboard;touch on shift key was ignoreed after when swipe done//~vak0I~
//vaay:120106 (Axe)even when Caps on, "1" key generates "1"        //~vaayI~
//vaax:120105 (Axe)80% font size if Key label strlen>3             //~vaaxI~
//vaaw:120105 (Axe)add Fn modifier to set key label to Fn          //~vaawI~
//vaau:120104 (Axe)add \u00a0(NonBrakingSpace) and \u00ad(SoftHyphen:force Linefeed)//~vaauI~
//vaai:111227 (Axe:BUG)flick operation generate primekey+flickkey  //~vaaiI~
//vaag:111223 (Axe)display small char generated by flick on keyboard key
//******************************************************************
package com.xe.Axe.kbd;                                            //~@@@@R~

//import java.util.ArrayList;                                      //~vaagR~
//import java.util.List;                                           //~vaagR~
import android.content.Context;
//import android.inputmethodservice.Keyboard;                      //~@@@@R~
import com.ForDeprecated.Funcs;
import com.xe.Axe.kbd.ims.Keyboard;                                //~@@@@R~
//import android.inputmethodservice.KeyboardView;                  //~@@@@R~
import com.xe.Axe.kbd.ims.KeyboardView;                            //~@@@@R~
//import android.inputmethodservice.Keyboard.Key;                  //~@@@@R~
import com.xe.Axe.kbd.ims.Keyboard.Key;                            //~@@@@R~

import com.xe.Axe.AxeG;
import com.xe.Axe.AxeTimer;
import com.xe.Axe.AxeTimerI;
import com.xe.Axe.AxeKeyValue;
import com.xe.Axe.Dump;
import com.xe.Axe.FontMetrics;
import com.xe.Axe.R;

import android.util.AttributeSet;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.GestureDetector;                               //~@@@@I~
import android.widget.PopupWindow;
import android.graphics.Bitmap;                                    //~vaagI~
import android.graphics.Canvas;                                    //~vaagI~
import android.graphics.Paint;                                     //~vaagI~
import android.graphics.drawable.Drawable;                         //~vaagI~
import android.graphics.Rect;                                      //~vaagI~
import android.graphics.Typeface;                                  //~vaagI~
import android.graphics.Region.Op;                                 //~vaagI~
import android.graphics.PorterDuff;                                //~vaagI~

import static com.xe.Axe.kbd.AxeKbdKey.*;

public class AxeKbdView extends KeyboardView                       //~@@@@R~
//      implements KeyboardView.OnKeyboardActionListener {         //~vaaiR~
        implements KeyboardView.OnKeyboardActionListener,AxeTimerI //~vaaiI~
{                                                                  //~vaaiI~
    public interface OnKbdViewListener {                           //~@@@@R~
                                                                   //~@@@@I~
        void onPress(int primaryCode);                             //~@@@@I~
        void onRelease(int primaryCode);                           //~@@@@I~
        void onKey(int primaryCode,int[] Pcodes);                  //~@@@@R~
        void onText(CharSequence text);                            //~@@@@I~
        void onFlickLeft(int Pcode);                               //~@@@@R~
        void onFlickRight(int Pcode);                              //~@@@@R~
        void onFlickDown(int Pcode);                               //~@@@@R~
        void onFlickUp(int Pcode);                                 //~@@@@R~
    }                                                              //~@@@@I~
    static final int KEYCODE_OPTIONS = -100;
	public static final int MAXSWIPE=4;                           //~@@@@I~
	private static final int SWIPE_LEFT=0;                         //~@@@@I~
	private static final int SWIPE_RIGHT=1;                        //~@@@@I~
	private static final int SWIPE_UP=2;                           //~@@@@I~
	private static final int SWIPE_DOWN=3;
	public  static final int SWIPE_SHIFTF=1;                       //~vaawI~
	private static final int COLOR_FLICKKEY=0xffffffb0;            //~vaagR~
	private static final int COLOR_STICKY_LABEL=0xff20f020; //green//~vc2mI~
	private static final int codeSHY=0x00ad;                       //~vaauI~
	private static final int codeNBSP=0x00a0;                      //~vaauI~
	private static final String labelSHY="SHY";                    //~vaauI~
	private static final String labelNBSP="NbSp";                  //~vaauR~
    private static String[] SkeyMod={"","S+","C+","CS+","A+","AS+","AC+","ACS+"};//~vaayI~
                                   //   1     2   3     4     5    6     7//~vaayI~
    private int minSwipeDeltaX,minSwipeDeltaY;                     //~@@@@I~
    private CharSequence updatePreviewText; 	//for getPreviewText               //~@@@@I~
    public  int modKeyIndex_Ctrl,modKeyIndex_Alt,modKeyIndex_Shift;    //~@@@@I~
    private int modKeyIndex_Kbd;                                   //~@@@@I~
    public  boolean popupMode;                                     //~@@@@I~
    private Paint paintF2,paintFP,paintFL;                         //~vaagR~
    private float flickKeyTextSizeRateP=(float)0.5;  // half of keytextsize//~vaagR~
    private float flickKeyTextSizeRate2=(float)0.333;// 1/3 of keytextsize if label is not single character//~vaagR~
    private float flickKeyTextSizeRateL=(float)0.65;// 1/3 of keytextsize if label is not single character//~vaagR~
    private float flickKeySizeRateHP=(float)3.0;      // 1/3 of key cell size//~vaagR~
    private float flickKeySizeRateHL=(float)2.0;      // 1/3 of key cell size//~vaagI~
    private float flickKeySizeRateWP=(float)3.0;      // 1/3 of key cell size//~vaagI~
    private float flickKeySizeRateWL=(float)3.0;      // 1/3 of key cell size//~vaagI~
    private float flickFontSz_KeyHeight=(float)0.8;   //80% of key hight(descent)//~vaagI~
    private float flickFontSz_KeyHeight2=(float)0.67;  //2/3 for long label key//~vaagI~
    private	float keyFW,keyFH;                                     //~vaagI~
    private AxeTimer axeTimer;                                     //~vaaiI~
	private	boolean swFlickTimerOn;                                //~vaaiI~
	private	boolean swPendingKeyDownEvent;                         //~vaaiI~
    private CharSequence delayedText;                              //~vaaiI~
    private int delayedKeyCode;                                    //~vaaiI~
    private int[] delayedKeyCodes;                                 //~vaaiI~
//    Keyboard keyboard;                                           //~@@@@R~
//    List<Key> keys;                                              //~@@@@R~
//    private Key[] arrayKeys;                                     //~@@@@R~
//    public int [][] swipeKeycodeTbl;                             //~@@@@R~
//    public ArrayList extkeyNameList[];                           //~@@@@R~
//    public String swipeExtkeyNameTbl[][];                        //~@@@@R~
      public AxeKbdKey.FlickKey flickKeyTbl[][];                               //~@@@@I~
//    private int mCurrentIdx;                                     //~@@@@R~
    int code_up,code_down,code_move,code_swipe;
    int swipeStartPosX,swipeStartPosY,swipeEndPosX,swipeEndPosY;   //~@@@@R~
//  private int extKeynameLen;                                     //~vaagR~
//    private AxeKbdView myKbdView;                                //~@@@@R~
    private OnKbdViewListener kbdViewListener;  //AxeSoftKbd       //~@@@@R~//~vc12R~
    public AxeKbdView(Context context, AttributeSet attrs) {       //~@@@@R~
        super(context, attrs);
//        super.setOnKeyboardActionListener(this);                 //~@@@@R~
        if (Dump.Y) Dump.println("AxeKbdView constructor 1");      //~@@@@R~
//        viewinit(context);                                       //~@@@@R~
	    adjustExtended();                                          //~@@@@I~
    }

    public AxeKbdView(Context context, AttributeSet attrs, int defStyle) {//~@@@@R~
        super(context, attrs, defStyle);
//        super.setOnKeyboardActionListener(this);                 //~@@@@R~
        if (Dump.Y) Dump.println("AxeKbdView constructor 2");      //~@@@@R~
//        viewinit(context);                                       //~@@@@R~
	    adjustExtended();                                          //~@@@@I~
    }
    private void adjustExtended()                                  //~@@@@I~
    {                                                              //~@@@@I~
//		myKbdView=this;                                            //~@@@@R~
        axeTimer=new AxeTimer(this/*callback*/,AxeG.swipeTimeout/*milisec delay*/,false/*repeat*/,null/*parameter*/);//~vaaiI~
        mSwipeThreshold/=5;                                        //~@@@@I~
    }                                                              //~@@@@I~
    public void setKbdListener(OnKbdViewListener Plistener) {      //~@@@@R~
        kbdViewListener=Plistener;                                 //~@@@@R~
        super.setOnKeyboardActionListener(this);    //KeyboardView-->AxeKbdView//~@@@@I~
    }                                                              //~@@@@I~

//    @Override                                                    //~@@@@R~
//    public boolean onTouchEvent(MotionEvent Pevent)              //~@@@@R~
//    {                                                            //~@@@@R~
//        int action=Pevent.getAction();                           //~@@@@R~
//        if (Dump.Y) Dump.println("AxeKbdView:onTouchEvent action="+action+",ptrs="+Pevent.getPointerCount());//~@@@@R~
//        int ix=(int) Pevent.getX();                              //~@@@@R~
//        int iy=(int) Pevent.getY();                              //~@@@@R~
//        if (Dump.Y) Dump.println("AxeKbdView:onTouchEvent x="+ix+",y="+iy);//~@@@@R~
////      int[] codeidxs=keyboard.getNearestKeys(ix,iy);           //~@@@@R~
////         int code=0,codeidx=0;                                 //~@@@@R~
////        if (codeidxs.length!=0)                                //~@@@@R~
////        {                                                      //~@@@@R~
////            codeidx=codeidxs[0];                               //~@@@@R~
////            Key key=keys.get(codeidx);                         //~@@@@R~
////            code=key.codes[0];                                 //~@@@@R~
////        }                                                      //~@@@@R~
//        int arrayidx=getKeyIndices(ix,iy,null);                  //~@@@@R~
//        Key actionkey;                                           //~@@@@R~
//        int code;                                                //~@@@@R~
//        if (arrayidx>=0)                                         //~@@@@R~
//        {                                                        //~@@@@R~
//            actionkey=arrayKeys[arrayidx];                       //~@@@@R~
//            code=actionkey.codes[0];                             //~@@@@R~
//        }                                                        //~@@@@R~
//        else                                                     //~@@@@R~
//            code=0;                                              //~@@@@R~
//        code_up=0;                                               //~@@@@R~
//        switch(action)                                           //~@@@@R~
//        {                                                        //~@@@@R~
//        case MotionEvent.ACTION_DOWN:                            //~@@@@R~
//            code_down=code;                                      //~@@@@R~
//            code_swipe=0;                                        //~@@@@R~
//            swipeKeyidx=arrayidx;                                //~@@@@R~
//            swipeStartPosX=ix;                                   //~@@@@R~
//            swipeStartPosY=iy;                                   //~@@@@R~
//            break;                                               //~@@@@R~
//        case MotionEvent.ACTION_MOVE:                            //~@@@@R~
//            if (code_down!=0 && code!=code_down)                 //~@@@@R~
//            {                                                    //~@@@@R~
//                swipeEndPosX=ix;                                 //~@@@@R~
//                swipeEndPosY=iy;                                 //~@@@@R~
//            }                                                    //~@@@@R~
//            break;                                               //~@@@@R~
//        case MotionEvent.ACTION_UP:                              //~@@@@R~
//            if (code_down!=0 && code!=code_down) //up out of the down key//~@@@@R~
//                code_swipe=code_down;                            //~@@@@R~
//            code_down=0;                                         //~@@@@R~
//            break;                                               //~@@@@R~
//        }                                                        //~@@@@R~
//        if (Dump.Y) Dump.println("AxeKbdView:onTouchEvent down="+Integer.toHexString(code_down)+",swipe="+Integer.toHexString(code_swipe)+",idx="+swipeKeyidx);;//~@@@@R~
//                                                                 //~@@@@R~
//        boolean rc=super.onTouchEvent(Pevent);                   //~@@@@R~
//        if (Dump.Y) Dump.println("AxeKbdView:onTouchEvent return from super");//~@@@@R~
//        if (code_swipe!=0)                                       //~@@@@R~
//        {                                                        //~@@@@R~
//            if (swipeEndPosX>=0)                                 //~@@@@R~
//                swipeCheck(swipeStartPosX,swipeStartPosY,swipeEndPosX,swipeEndPosY);//~@@@@R~
//            swipeKeyidx=-1;                                      //~@@@@R~
//            swipeEndPosX=-1;                                     //~@@@@R~
//        }                                                        //~@@@@R~
//        return rc;                                               //~@@@@R~
//    }                                                            //~@@@@R~
//    public void swipeCheck(int Px1,int Py1,int Px2,int Py2)      //~@@@@R~
//    {                                                            //~@@@@R~
//        int distx=Math.abs(Px1-Px2);                             //~@@@@R~
//        int disty=Math.abs(Py1-Py2);                             //~@@@@R~
//        if (Dump.Y) Dump.println("AxeKbdView:swipeCheck ("+Px1+","+Py1+")-->("+Px2+","+Py2+",distx="+distx+",disty="+disty);//~@@@@R~
//        if (distx>disty)                                         //~@@@@R~
//            if (Px1>Px2)                                         //~@@@@R~
//                super.swipeLeft();  //listner call,callback this but dummy for popup key//~@@@@R~
//            else                                                 //~@@@@R~
//                super.swipeRight();                              //~@@@@R~
//        else                                                     //~@@@@R~
//            if (Py1>Py2)                                         //~@@@@R~
//                super.swipeUp();                                 //~@@@@R~
//            else                                                 //~@@@@R~
//                super.swipeDown();                               //~@@@@R~
//    }                                                            //~@@@@R~
    @Override                                                      //~@@@@I~
	public CharSequence adjustCase(CharSequence label)             //~@@@@I~
    {                                                              //~@@@@I~
//      if (Dump.Y) Dump.println("AxeKbdView adjustCode label="+label);//~@@@@R~//~vak1R~//~vc12R~
    	return label;                                              //~@@@@I~
    }                                                              //~@@@@I~
    @Override                                                      //~@@@@I~
public /*private*/ void initGestureDetector() {                    //~@@@@I~
//    //@@@@test                                                   //~vak1R~
//        int touchSlop;                                           //~vak1R~
//        int mMinimumFlingVelocity;                               //~vak1R~
//        int mMaximumFlingVelocity;                               //~vak1R~
//            touchSlop = ViewConfiguration.getTouchSlop();        //~vak1R~
//            mMinimumFlingVelocity = ViewConfiguration.getMinimumFlingVelocity();//~vak1R~
//            mMaximumFlingVelocity = ViewConfiguration.getMaximumFlingVelocity();//~vak1R~
//            if (Dump.Y) Dump.println("touchslop="+touchSlop+",min="+mMinimumFlingVelocity+",max="+mMaximumFlingVelocity);//~vak1R~
//        Context ctxt=getContext();                               //~vak1R~
//        final ViewConfiguration configuration = ViewConfiguration.get(ctxt);//~vak1R~
//            touchSlop = configuration.getScaledTouchSlop();      //~vak1R~
//            mMinimumFlingVelocity = configuration.getScaledMinimumFlingVelocity();//~vak1R~
//            mMaximumFlingVelocity = configuration.getScaledMaximumFlingVelocity();//~vak1R~
//            if (Dump.Y) Dump.println("context touchslop="+touchSlop+",min="+mMinimumFlingVelocity+",max="+mMaximumFlingVelocity);//~vak1R~
//                                                                 //~vak1R~
//    //@@@@test                                                   //~vak1R~
        mGestureDetector = new GestureDetector(getContext(), new GestureDetector.SimpleOnGestureListener() {//~@@@@I~
            @Override                                              //~@@@@I~
            public boolean onFling(MotionEvent me1, MotionEvent me2,//~@@@@I~
                    float velocityX, float velocityY) {            //~@@@@I~
              try                                                  //~@@@@I~
              {                                                    //~@@@@I~
                if (Dump.Y) Dump.println("AxeKbdView.SimpleOnGestureListener.onFling verocity X="+velocityX+",Y="+velocityY);//~@@@@I~//~vc2nR~
                if (Dump.Y) Dump.println("AxeKbdView.SimpleOnGestureListener.onFling Event1 action="+me1.getAction()+",event2="+me2.getAction());//~vaaiI~//~vc2nR~
                if (mPossiblePoly) return false;                   //~@@@@I~
                final float absX = Math.abs(velocityX);            //~@@@@I~
                final float absY = Math.abs(velocityY);            //~@@@@I~
                float deltaX = me2.getX() - me1.getX();            //~@@@@I~
                float deltaY = me2.getY() - me1.getY();            //~@@@@I~
                if (Dump.Y) Dump.println("AxeKbdView.SimpleOnGestureListener:onFling posX="+me1.getX()+"-"+me2.getX());//~@@@@I~//~vc2nR~
                if (Dump.Y) Dump.println("AxeKbdView.SimpleOnGestureListener:onFling posY="+me1.getY()+"-"+me2.getY());//~@@@@I~//~vc2nR~
                if (Dump.Y) Dump.println("AxeKbdView.SimpleOnGestureListener:onFling abs X="+absX+",Y="+absY);//~vak1I~//~vc2nR~
//              int travelX = getWidth() / 2; // Half the keyboard width//~@@@@I~
//              int travelY = getHeight() / 2; // Half the keyboard height//~@@@@I~
                int travelX = minSwipeDeltaX;                      //~@@@@I~
                int travelY = minSwipeDeltaY;                      //~@@@@I~
                if (Dump.Y) Dump.println("SimpleOnGestureListener:onFling delta X="+deltaX+",Y="+deltaY);//~@@@@I~
                if (Dump.Y) Dump.println("SimpleOnGestureListener:travel delta X="+travelX+",Y="+travelY);//~@@@@I~
                mSwipeTracker.computeCurrentVelocity(1000);        //~@@@@I~
                final float endingVelocityX = mSwipeTracker.getXVelocity();//~@@@@I~
                final float endingVelocityY = mSwipeTracker.getYVelocity();//~@@@@I~
                if (Dump.Y) Dump.println("AxeKbdView.SimpleOnGestureListener:onFling ending velocity X="+endingVelocityX+",Y="+endingVelocityY);//~@@@@I~//~vc2nR~
                if (Dump.Y) Dump.println("AxeKbdView.SimpleOnGestureListener:onFling swipe mSwipeThreshold="+mSwipeThreshold+",mDisambiguateSwipe="+mDisambiguateSwipe);//~@@@@I~//+vc2nR~
                boolean sendDownKey = false;                       //~@@@@I~
                if (velocityX > mSwipeThreshold && absY < absX && deltaX > travelX) {//~@@@@I~
                    if (mDisambiguateSwipe && endingVelocityX < velocityX / 4) {//~@@@@I~
                        sendDownKey = true;                        //~@@@@I~
                    } else {                                       //~@@@@I~
				        mKeyboardActionListener.swipeRight();      //~@@@@I~
						if (Dump.Y) Dump.println("AxeKbdView onFlingRight repeatkeyindex="+mRepeatKeyIndex);//~vak0I~
                        mRepeatKeyIndex = NOT_A_KEY;               //~vak0I~
                        return true;                               //~@@@@I~
                    }                                              //~@@@@I~
                } else if (velocityX < -mSwipeThreshold && absY < absX && deltaX < -travelX) {//~@@@@I~
                    if (mDisambiguateSwipe && endingVelocityX > velocityX / 4) {//~@@@@I~
                        sendDownKey = true;                        //~@@@@I~
                    } else {                                       //~@@@@I~
				        mKeyboardActionListener.swipeLeft();       //~@@@@I~
                        mRepeatKeyIndex = NOT_A_KEY;               //~vak0I~
                        return true;                               //~@@@@I~
                    }                                              //~@@@@I~
                } else if (velocityY < -mSwipeThreshold && absX < absY && deltaY < -travelY) {//~@@@@I~
                    if (mDisambiguateSwipe && endingVelocityY > velocityY / 4) {//~@@@@I~
                        sendDownKey = true;                        //~@@@@I~
                    } else {                                       //~@@@@I~
				        mKeyboardActionListener.swipeUp();         //~@@@@I~
                        mRepeatKeyIndex = NOT_A_KEY;               //~vak0I~
                        return true;                               //~@@@@I~
                    }                                              //~@@@@I~
                } else if (velocityY > mSwipeThreshold && absX < absY / 2 && deltaY > travelY) {//~@@@@I~
                    if (mDisambiguateSwipe && endingVelocityY < velocityY / 4) {//~@@@@I~
                        sendDownKey = true;                        //~@@@@I~
                    } else {                                       //~@@@@I~
				        mKeyboardActionListener.swipeDown();       //~@@@@I~
                        mRepeatKeyIndex = NOT_A_KEY;               //~vak0I~
                        return true;                               //~@@@@I~
                    }                                              //~@@@@I~
                }                                                  //~@@@@I~
                                                                   //~@@@@I~
                if (sendDownKey) {                                 //~@@@@I~
                    detectAndSendKey(mDownKey, mStartX, mStartY, me1.getEventTime());//~@@@@I~
                }     
                if (Dump.Y) Dump.println("SimpleOnGestureListener:senddownkey="+sendDownKey);//~vak1I~
              }  //~@@@@I~
              catch(Exception e)                                   //~@@@@I~
              {                                                    //~@@@@I~
                  Dump.println(e,"AxeKbdView:OnFling");              //~@@@@I~//~vaayR~
              }                                                    //~@@@@I~
                if (me2.getAction()==MotionEvent.ACTION_UP)        //~vaaiI~
	    	        sendPendingKeyDownEvent();                        //~vaaiI~
                return false;                                      //~@@@@I~
            }                                                      //~@@@@I~
//            @Override                                            //~vaaiR~
//            public void onShowPress(MotionEvent e)               //~vaaiR~
//            {                                                    //~vaaiR~
//                if (Dump.Y) Dump.println("onShowPress "+e.toString());//~vaaiR~
//                return;                                          //~vaaiR~
//            }                                                    //~vaaiR~
            @Override                                              //~vaaiI~
            public boolean onSingleTapUp(MotionEvent e)                           //~vaaiI~
            {                                                      //~vaaiI~
		        if (Dump.Y) Dump.println("onSingleTapUp swPending="+swPendingKeyDownEvent+",event="+e.toString());//~vaaiR~
    	        sendPendingKeyDownEvent();                            //~vaaiI~
                return false;                                      //~vaaiI~
            }                                                      //~vaaiI~
            @Override                                              //~vak1I~
            public boolean onDoubleTap(MotionEvent e)              //~vak1I~
            {                                                      //~vak1I~
		        if (Dump.Y) Dump.println("AxeView onDoubleTap,event="+e.toString());//~vak1I~
                return false;                                      //~vak1I~
            }                                                      //~vak1I~
            @Override                                              //~vak1I~
            public boolean onDoubleTapEvent(MotionEvent e)         //~vak1I~
            {                                                      //~vak1I~
		        if (Dump.Y) Dump.println("AxeView onDoubleTapEvent,event="+e.toString());//~vak1I~
                return false;                                      //~vak1I~
            }                                                      //~vak1I~
            @Override                                              //~vak1I~
            public boolean onDown(MotionEvent e)                   //~vak1I~
            {                                                      //~vak1I~
		        if (Dump.Y) Dump.println("AxeView onDown,event="+e.toString());//~vak1I~
                return false;                                      //~vak1I~
            }                                                      //~vak1I~
            @Override                                              //~vak1I~
            public boolean onSingleTapConfirmed(MotionEvent e)     //~vak1I~
            {                                                      //~vak1I~
		        if (Dump.Y) Dump.println("AxeView onSingleTapConfirmed,event="+e.toString());//~vak1I~
                return false;                                      //~vak1I~
            }                                                      //~vak1I~
            @Override                                              //~vak1I~
            public void onLongPress(MotionEvent e)                 //~vak1I~
            {                                                      //~vak1I~
		        if (Dump.Y) Dump.println("AxeView onLongPress,event="+e.toString());//~vak1I~
            }                                                      //~vak1I~
            @Override                                              //~vak1I~
            public void onShowPress(MotionEvent e)                 //~vak1I~
            {                                                      //~vak1I~
		        if (Dump.Y) Dump.println("AxeView onShowPress,event="+e.toString());//~vak1I~
            }                                                      //~vak1I~
            public boolean onScroll(MotionEvent me1, MotionEvent me2,//~vak1I~
                    float velocityX, float velocityY) {            //~vak1I~
		        if (Dump.Y) Dump.println("AxeView onScroll,event1="+me1.toString());//~vak1I~
		        if (Dump.Y) Dump.println("AxeView onScroll,event2="+me2.toString());//~vak1I~
                return false;                                      //~vak1I~
            }                                                      //~vak1I~
        });                                                        //~@@@@I~
                                                                   //~@@@@I~
        mGestureDetector.setIsLongpressEnabled(false);             //~@@@@I~
    }                                                              //~@@@@I~
    @Override                                                      //~@@@@I~
    public void setKeyboard(Keyboard Pkbd)                            //~@@@@R~
    {                                                              //~@@@@I~
        if (Dump.Y) Dump.println("AxeKbdView:setKeyboard");        //~@@@@R~
        super.setKeyboard(Pkbd);                                   //~@@@@I~
//        keyboard=Pkbd;                                           //~@@@@R~
//        keys=(List<Key>)Pkbd.getKeys();                          //~@@@@R~
//        arrayKeyskeys.toArray(new Key[keys.size()]);             //~@@@@R~
        initPopupChar();                                           //~@@@@I~
        if (Dump.Y) Dump.println("AxeKbdView:isPreviewEnabled="+isPreviewEnabled());//~@@@@R~
    //  setPreviewEnabed(false);                                   //~@@@@I~
    //	int [] nearest=Pkbd.getNearestKeys(0/*x*/,0/*y*/);         //~@@@@R~
    	minSwipeDeltaX=((AxeKbd)mKeyboard).mDefaultWidth/2;        //~@@@@R~
    	minSwipeDeltaY=((AxeKbd)mKeyboard).mDefaultHeight/2;       //~@@@@R~
        if (Dump.Y) Dump.println("AxeKbdView:minSwipeDelta X="+minSwipeDeltaX+",Y="+minSwipeDeltaY);//~@@@@R~
        ((AxeKbd)Pkbd).setKeyboardView(this);                      //~@@@@R~
    }                                                              //~@@@@I~
//xml popupchar :shift(SwipeLeft),AltG(SwipeRight),Shft+AltG(SwipeUp),ExtKey(SwipeDown)//~@@@@I~
//drop space,replace Extkey by 'F',add primary coe at last         //~@@@@I~
    private void initPopupChar()                                   //~@@@@I~
    {                                                              //~@@@@I~
//        int keyctr=arrayKeys.length;                             //~@@@@R~
        int keyctr=mKeys.length;                                   //~@@@@I~
//        swipeKeycodeTbl=new int[keyctr][MAXSWIPE+1];                    //~@@@@I~//~@@@@R~
//        extkeyNameList=new ArrayList[keyctr];                    //~@@@@R~
//        swipeExtkeyNameTbl=new String[keyctr][MAXSWIPE+1];       //~@@@@R~
        flickKeyTbl=new AxeKbdKey.FlickKey[keyctr][MAXSWIPE+1];    //~@@@@I~
//      String old;                                                //~@@@@I~//~vaagR~
//      StringBuffer sb=new StringBuffer();                       //~@@@@I~//~vaagR~
        for (int ii=0;ii<keyctr;ii++)               //~@@@@I~
        {                                                          //~@@@@I~
//            Key key=arrayKeys[ii];                               //~@@@@R~
            Key key=mKeys[ii];                                     //~@@@@I~
//          old=(String)key.popupCharacters;                       //~@@@@I~//~vaagR~
            int code=key.codes[0];                                 //~@@@@I~
            if (code==Keyboard.KEYCODE_SHIFT)                               //~@@@@I~
            	modKeyIndex_Shift=ii;                              //~@@@@I~
            else                                                   //~@@@@I~
            if (code==Keyboard.KEYCODE_ALT)                                 //~@@@@I~
            	modKeyIndex_Alt=ii;                                //~@@@@I~
            else                                                   //~@@@@I~
            if (code==AxeKbdKey.KEYCODE_CTRL)                         //~@@@@R~
            	modKeyIndex_Ctrl=ii;                               //~@@@@I~
            else                                                   //~@@@@I~
            if (code==AxeKbdKey.KEYCODE_KBD)                       //~@@@@I~
            	modKeyIndex_Kbd=ii;                                //~@@@@I~
  				key.popupCharacters=AxeKbdKey.transPopupCharacters(key,MAXSWIPE,flickKeyTbl[ii]);//~@@@@I~
//                key.repeatable=AxeKbdKey.isRepeatableKey(code) && !((AxeKbd)mKeyboard).isMiniKeyboard;//~@@@@R~
                flickKeyTbl[ii][0].repeatable=key.repeatable;	//save xml value(isrepeatable)//~@@@@I~
                if (Dump.Y) Dump.println("AxeKbdView:initpopup new popup="+key.popupCharacters+",repeatable="+key.repeatable+",mini="+((AxeKbd)mKeyboard).isMiniKeyboard);//~@@@@R~
//            }                                                    //~@@@@R~
        }    //~@@@@I~
            //~@@@@I~
    }//initPopupChar                                               //~@@@@R~
                                                                   //~va15I~//~@@@@I~
    public void onText(CharSequence text) {                        //~@@@@M~
    	if (Dump.Y) Dump.println("AxeKbdView onText:text="+text.toString()+",swFlickTimerOn="+swFlickTimerOn+",pending="+swPendingKeyDownEvent);//~vaaiR~
    	if (swFlickTimerOn)                                        //~vaaiI~
        {                                                          //~vaaiI~
        	if (swPendingKeyDownEvent)                             //~vaaiR~
            	sendPendingKeyDownEvent();                            //~vaaiI~
            else                                                   //~vaaiI~
            {                                                      //~vaaiI~
        		swPendingKeyDownEvent=true;                        //~vaaiR~
        		delayedText=text;                                  //~vaaiR~
        		return;                                            //~vaaiR~
            }                                                      //~vaaiI~
        }                                                          //~vaaiI~
    	kbdViewListener.onText(text);                              //~@@@@R~
	}                                                              //~@@@@M~
//*************************************                            //~@@@@I~
//** by touch                                                      //~@@@@I~
//*************************************                            //~@@@@I~
    public void onKey(int primaryCode, int[] keyCodes)             //~@@@@R~
    {                                                              //~@@@@I~
    	if (Dump.Y) Dump.println("AxeKbdView onKey:primarycode="+Integer.toHexString(primaryCode)+",swFlickTimerOn="+swFlickTimerOn);//~vaaiI~
    	if (swFlickTimerOn)                                        //~vaaiI~
        {                                                          //~vaaiI~
        	if (swPendingKeyDownEvent)                             //~vaaiR~
            	sendPendingKeyDownEvent();                            //~vaaiI~
            else                                                   //~vaaiI~
            {                                                      //~vaaiI~
                swPendingKeyDownEvent=true;                        //~vaaiR~
                delayedKeyCode=primaryCode;                        //~vaaiR~
                delayedKeyCodes=keyCodes;                          //~vaaiR~
                return;                                            //~vaaiR~
            }                                                      //~vaaiI~
        }                                                          //~vaaiI~
    	if (keyCodes==null)	//mini keyboard                        //~@@@@R~
    		kbdViewListener.onKey(primaryCode,keyCodes/*null:minikbd*/);//~@@@@R~
        else                                                       //~@@@@I~
        if (primaryCode<0)  //shift,ctrl,alt,kbd,Del(BackSpace)    //~@@@@R~
    		kbdViewListener.onKey(primaryCode,keyCodes);           //~@@@@R~
        else                                                       //~@@@@I~
        {                                                          //~@@@@I~
	        int code=0;                                            //~@@@@I~
            Key key=getDownKey();	                               //~@@@@I~
            if (key!=null)                                         //~@@@@R~
            {                                                      //~@@@@I~
                if (key.label==null)	//arrow,enter              //~@@@@R~
			        code=primaryCode;                              //~@@@@I~
                else                                               //~@@@@I~
                {                                                  //~@@@@I~
                	if (key.label.length()==1)                       //~@@@@I~
                    {                                              //~@@@@I~
	                    code=key.label.charAt(0);                  //~@@@@I~
                        if (code==' ' && primaryCode!=' ')         //~@@@@I~
                        	code=0;                                //~@@@@I~
                        else                                       //~@@@@I~
                        if (isShifted())                           //~@@@@I~
                        {                                          //~@@@@I~
                			if (Character.isLowerCase((char)code)) //~@@@@I~
                                code=(int)Character.toUpperCase((char)code);//~@@@@I~
                            else                                   //~@@@@I~
                			if (Character.isUpperCase((char)code)) //~@@@@I~
                                code=(int)Character.toLowerCase((char)code);//~@@@@I~
                            else                                   //~vaayI~
			                if (!isAltGred()&&!isAltGrSed())       //~vaayI~
                            {                                      //~vaayI~
//                                CharSequence popup=key.popupCharacters;//~vaayR~
//                                if (popup.length()>=2)           //~vaayR~
//                                    code=popup.charAt(1);        //~vaayR~
					            code=flickKeyTbl[mDownKey][1].code;//~vaayI~
                            }                                      //~vaayI~
                        }                                          //~@@@@I~
						if (isShortcut())	//protect repeated key genarated by timer after reset Shortcut flag//~@@@@I~
                        {                                          //~@@@@I~
				            mHandler.removeMessages(MSG_REPEAT);   //~@@@@I~
			                if (Dump.Y) Dump.println("AxeKbdView remove repeat keycode by label="+Integer.toHexString(code));//~@@@@I~
                        }                                          //~@@@@I~
                    }                                              //~@@@@I~
                    else               //Tab,Esc,Delete            //~@@@@R~
                    {                                              //~vaauI~
                    	code=specialLabelCode(key.label.toString());	//chk RSP/SHY//~vaauI~
                        if (code<0)	//not special Key (NBSP/SHY)   //~vaawI~
                        	if (isShiftFed())                      //~vaawI~
                            {                                      //~vaawI~
								int gdkcode=((AxeKbd)mKeyboard).getCodeShiftF(mDownKey);//~vaawR~
                                if (gdkcode>0)                     //~vaawI~
                                	code=gdkcode;                  //~vaawI~
                            }                                      //~vaawI~
                      if (code<0)                                  //~vaauI~
                    	code=primaryCode;                         //~@@@@I~
                    }                                              //~vaauI~
                }                                                  //~@@@@I~
                if (Dump.Y) Dump.println("AxeKbdView keycode by label="+Integer.toHexString(code));//~@@@@R~
            }                                                      //~@@@@I~
            if (code!=0)                                           //~@@@@I~
            {                                                      //~@@@@I~
	            kbdViewListener.onKey(code,keyCodes);              //~@@@@R~
            }                                                      //~@@@@I~
        }                                                          //~@@@@I~
	}                                                              //~@@@@I~
                                                                   //~@@@@I~
    public void swipeRight() {                                     //~@@@@I~
    	int swipecode=getSwipeKeycode(SWIPE_RIGHT);	//AltG+        //~@@@@R~
		if (Dump.Y) Dump.println("AxeKbdView:swipe Right code="+Integer.toHexString(swipecode));//~@@@@R~
    	if (isModifierKbdCharKey())                                //~@@@@I~
        	return;                                                //~@@@@I~
        kbdViewListener.onFlickRight(swipecode);                   //~@@@@R~
    }                                                              //~@@@@I~
                                                                   //~@@@@I~
    public void swipeLeft() {                                      //~@@@@I~
    	int swipecode=getSwipeKeycode(SWIPE_LEFT);	//Shift+       //~@@@@R~
		if (Dump.Y) Dump.println("AxeKbdView:swipe Left code="+Integer.toHexString(swipecode));//~@@@@R~
    	if (isModifierKbdCharKey())                               //~@@@@I~
        	return;                                                //~@@@@I~
        kbdViewListener.onFlickLeft(swipecode);                    //~@@@@R~
    }                                                              //~@@@@I~
                                                                   //~@@@@I~
    public void swipeDown() {                                      //~@@@@I~
    	int swipecode=getSwipeKeycode(SWIPE_DOWN);	//extendedkey  //~@@@@R~
		if (Dump.Y) Dump.println("AxeKbdView:swipe Down code="+Integer.toHexString(swipecode));//~@@@@R~
    	if (isModifierKbdCharKey())                                //~@@@@I~
        	return;                                                //~@@@@I~
        kbdViewListener.onFlickDown(swipecode);                    //~@@@@R~
    }                                                              //~@@@@I~
                                                                   //~@@@@I~
    public void swipeUp() {                                        //~@@@@I~
    	int swipecode=getSwipeKeycode(SWIPE_UP);   //Shift+AltG    //~@@@@R~
		if (Dump.Y) Dump.println("AxeKbdView:swipe Up code="+Integer.toHexString(swipecode));//~@@@@R~
    	if (isModifierKbdCharKey())                                //~@@@@I~
        	return;                                                //~@@@@I~
        kbdViewListener.onFlickUp(swipecode);                      //~@@@@R~
    }                                                              //~@@@@I~
    private boolean isModifierKbdCharKey()                         //~@@@@I~
    {                                                              //~@@@@I~
    	boolean rc;                                                //~@@@@I~
		Key key=getDownKey();                                      //~@@@@I~
        if (key==null)                                             //~@@@@I~
        	return true;	//not generate swipe key               //~@@@@I~
//*accept flick regardless to modifier status                      //~@@@@I~
//        if (key.label!=null && key.label.length()==1)            //~@@@@R~
//            rc=(isShifted()||isShiftRed()||isAltGred()||isAltGrSed()||isCapsed());//~@@@@R~
//        else                                                     //~@@@@R~
        	rc=false;                                              //~@@@@I~
		if (Dump.Y) Dump.println("AxeKbdView:isModifierKbdCharKey rc="+rc+",keylabel="+key.label);//~@@@@R~
    	return rc;                                                 //~@@@@I~
    }                                                              //~@@@@I~
    private Key getDownKey()                                       //~@@@@I~
    {                                                              //~@@@@I~
    	if (mDownKey<0 || mDownKey>=mKeys.length)                  //~@@@@I~
        	return null;                                           //~@@@@I~
        return mKeys[mDownKey];                                    //~@@@@I~
    }                                                              //~@@@@I~
                                                                   //~@@@@I~
    public void onPress(int primaryCode) {                         //~@@@@I~
		if (Dump.Y) Dump.println("AxeKbdView:OnPress keycode="+Integer.toHexString(primaryCode));//~@@@@R~
        swFlickTimerOn=false;                               //~vaaiI~
        swPendingKeyDownEvent=false;                               //~vaaiI~
        axeTimer.stop();	//ignored if not active                //~vaaiI~
        if (!mMiniKeyboardOnScreen)                                //~vaaiI~
        {                                                          //~vaaiI~
        	if (primaryCode!=0)	                                   //~vaaiI~
            {                                                      //~vaaiI~
                if (mCurrentKey >= 0 && mKeys[mCurrentKey].repeatable)//~vaaiI~
                {                                                  //~vaaiI~
                	axeTimer.start(AxeG.swipeTimeout);             //~vaaiI~
			        swFlickTimerOn=true;                           //~vaaiI~
                    return;                                        //~vaaiI~
                }                                                  //~vaaiI~
            }                                                      //~vaaiI~
        }                                                          //~vaaiI~
        kbdViewListener.onPress(primaryCode);                      //~@@@@R~
    }                                                              //~@@@@I~
                                                                   //~@@@@I~
    public void onRelease(int primaryCode) {                       //~@@@@I~
		if (Dump.Y) Dump.println("AxeKbdView:OnRelease keycode="+Integer.toHexString(primaryCode));//~@@@@R~
        kbdViewListener.onRelease(primaryCode);                    //~@@@@R~
    }                                                              //~@@@@I~
	private int getSwipeKeycode(int Pdest)                         //~@@@@R~
    {                                                              //~@@@@I~
        int code=0;                                                //~@@@@R~
		if (Dump.Y) Dump.println("AxeKbdView:getSwipeKeycode Pdest="+Pdest);//~vak1I~
    	if (getDownKey()!=null)                                    //~@@@@I~
        {                                                          //~@@@@I~
//            code=swipeKeycodeTbl[mDownKey][Pdest+1];             //~@@@@R~
            code=flickKeyTbl[mDownKey][Pdest+1].code;              //~@@@@I~
//            if (code==0)    //not defined                        //~@@@@R~
//                code=swipeKeycodeTbl[mDownKey][0];               //~@@@@R~
        }                                                          //~@@@@I~
		if (Dump.Y) Dump.println("AxeKbdView:getSwipeKeycode flickTimerOn="+swFlickTimerOn+",downkeyidx="+mDownKey+"dest="+Pdest+",keycode="+Integer.toHexString(code)+",primarycode="+Integer.toHexString(code));//~vaaiR~
    	swFlickTimerOn=false;                                      //~vaaiI~
        axeTimer.stop();                                           //~vaaiI~
        if (code >0 && !isRepeatable(code))                        //~@@@@I~
			mHandler.removeMessages(MSG_REPEAT);                   //~@@@@I~
		if (code>0)	//defined swipe code                           //~@@@@R~
	        updatePreview(mDownKey,Pdest+1,code);                  //~@@@@I~
        return code;                                               //~@@@@I~
    }                                                              //~@@@@I~
    //************************************************************ //~@@@@R~
    //*delete repeat timer for non repeatable extkey for softKbd   //~@@@@I~
    //************************************************************ //~@@@@I~
	private boolean isRepeatable(int Pkeycode)                     //~@@@@I~
    {                                                              //~@@@@I~
        boolean rc=true;                                           //~@@@@I~
		if (AxeKeyValue.isValidExtGDK(Pkeycode))                   //~@@@@R~
        {	                                                       //~@@@@I~
			if (!AxeKeyValue.isRepeatableExtKeyForSoftKbd(Pkeycode))//~@@@@I~
                rc=false;                                          //~@@@@I~
        }                                                          //~@@@@I~
		if (Dump.Y) Dump.println("AxeKbdView:isRepeatable code="+Integer.toHexString(Pkeycode)+",rc="+rc);//~@@@@I~
        return true;                                               //~@@@@I~
    }                                                              //~@@@@I~
    //****************************                                 //~@@@@I~
	private void updatePreview(int Pkeyindex,int Pswipedest,int Pcode)//~@@@@I~
    {                                                              //~@@@@I~
        int oldKeyIndex = mCurrentKeyIndex;                        //~@@@@I~
        final PopupWindow previewPopup = mPreviewPopup;            //~@@@@I~
		if (Dump.Y) Dump.println("AxeKbdView:updatePreview oldindex="+oldKeyIndex+",new="+Pkeyindex+",showPreview="+mShowPreview+",dest="+Pswipedest);//~vak1R~
//      if (oldKeyIndex != Pkeyindex && mShowPreview)              //~@@@@I~//~vak1R~
        if (mShowPreview                                           //~vak1I~
        &&  (oldKeyIndex != Pkeyindex || Pswipedest>0) )            //~vak1I~
        {                                                          //~@@@@I~
            if (Pkeyindex != NOT_A_KEY)                            //~@@@@I~
            {                                                      //~@@@@I~
				if (Dump.Y) Dump.println("AxeKbdView:updatePreview isshowing="+previewPopup.isShowing()+",visibility="+mPreviewText.getVisibility());//~@@@@R~
                if (previewPopup.isShowing() && mPreviewText.getVisibility() == VISIBLE)//~@@@@I~
                {                                                  //~@@@@I~
//                    CharSequence label=swipeExtkeyNameTbl[Pkeyindex][Pswipedest];//~@@@@R~
                    CharSequence label=flickKeyTbl[Pkeyindex][Pswipedest].name;//~@@@@I~
                    if (label==null)                               //~@@@@I~
            			label = String.valueOf((char)Pcode);             //~@@@@I~
                    updatePreviewText=label; 	//for getPreviewText//~@@@@I~
					if (Dump.Y) Dump.println("AxeKbdView:updatePreview label="+label);//~@@@@R~
                    showKey(Pkeyindex);                             //~@@@@I~
                	updatePreviewText=null;                        //~@@@@I~
                }                                                  //~@@@@I~
            }                                                      //~@@@@I~
        }                                                          //~@@@@I~
    }                                                              //~@@@@I~
//*********************                                            //~@@@@I~
    @Override                                                      //~@@@@I~
    public CharSequence getPreviewText(Key Pkey) {                 //~@@@@I~
		if (Dump.Y) Dump.println("AxeKbdView:getPreviewText label="+updatePreviewText);//~@@@@R~
    	if (updatePreviewText==null)                               //~@@@@I~
//      	return super.getPreviewText(Pkey);                     //~@@@@I~//~vaayR~
        	return getPreviewTextAdjustCase(Pkey);                 //~vaayI~
        return updatePreviewText;                                  //~@@@@I~
    }                                                              //~@@@@I~
//**********************************************                   //~vaayI~
//*key label is not shifted,so adjust          *                   //~vaayI~
//**********************************************                   //~vaayI~
    public CharSequence getPreviewTextAdjustCase(Key Pkey)         //~vaayI~
    {                                                              //~vaayI~
    	int code,mod=0;                                            //~vaayR~
        CharSequence label=Pkey.label;                             //~vaayI~
		if (Dump.Y) Dump.println("AxeKbdView:getPreviewTextAdjustcase key.label="+label);//~vaayI~
        if (label==null)                                           //~vc2nI~
            return "";                                             //~vc2nI~
        if (isShifted())                                           //~vaayI~
        {                                                          //~vaayI~
        	if (label.length()==1)                                 //~vaayI~
        	{                                                      //~vaayI~
	            code=label.charAt(0);                              //~vaayI~
                if (Character.isLowerCase((char)code))             //~vaayI~
                	code=(int)Character.toUpperCase((char)code);   //~vaayI~
                else                                               //~vaayI~
                if (Character.isUpperCase((char)code))             //~vaayI~
                	code=(int)Character.toLowerCase((char)code);   //~vaayI~
                else                                               //~vaayI~
                if (!isAltGred()&&!isAltGrSed())                   //~vaayI~
                {                                                  //~vaayI~
					CharSequence popup=Pkey.popupCharacters;       //~vaayR~
	        		code=popup.charAt(1);                          //~vaayR~
                }                                                  //~vaayI~
		        label=String.valueOf((char)code);                  //~vaayI~
			}                                                      //~vaayI~
            else                                                   //~vaayI~
            	mod=1;  //modifier                                 //~vaayR~
        }                                                          //~vaayI~
                                                                   //~vaayI~
        if (!Pkey.modifier)                                        //~vaayI~
        {                                                          //~vaayI~
        	if (isCtrled())                                        //~vaayR~
            	mod+=2;                                            //~vaayR~
        	if (isAlted())                                         //~vaayR~
            	mod+=4;                                            //~vaayR~
        	if (mod!=0)                                            //~vaayR~
            	label=SkeyMod[mod]+label;                          //~vaayR~
        }                                                          //~vaayI~
		if (Dump.Y) Dump.println("AxeKbdView:getPreviewTextAdjustcase return label="+label);//~vaayI~
        return label;                                              //~vaayI~
    }                                                              //~vaayI~
//*********************                                            //~@@@@I~
//    private View mMiniKeyboardContainer;                         //~@@@@R~
//    private Map<Key,View> mMiniKeyboardCache;                    //~@@@@R~
//    private KeyboardView mMiniKeyboard;                          //~@@@@R~
//    private int mPopupX;                                         //~@@@@R~
//    private int mPopupY;                                         //~@@@@R~
//    private OnKeyboardActionListener mKeyboardActionListener;    //~@@@@R~
//    private int[] mWindowOffset;                                 //~@@@@R~
//    private PopupWindow mPopupKeyboard;                          //~@@@@R~
//    private boolean mMiniKeyboardOnScreen;                       //~@@@@R~
//    private int mPopupLayout;                                    //~@@@@R~
                                                                   //~@@@@I~
//    private void viewinit(Context context)                       //~@@@@R~
//    {                                                            //~@@@@R~
//        mMiniKeyboardCache = new HashMap<Key,View>();            //~@@@@R~
//        mPopupKeyboard = new PopupWindow(context);               //~@@@@R~
//        mPopupLayout = R.layout.keyboard_popup_keyboard;         //~@@@@R~
//                                                                 //~@@@@R~
//    }                                                            //~@@@@R~
//*********************                                            //~@@@@I~
    @Override
    protected boolean onLongPress(Key popupKey) {                  //~@@@@I~
        int popupKeyboardId = popupKey.popupResId;                 //~@@@@I~
//        if (flickKeyTbl[mCurrentKey][0].repeatable)              //~@@@@R~
        if (popupKey.repeatable)                                   //~@@@@R~
        {                                                          //~@@@@R~
            if (Dump.Y) Dump.println("AxeKbdView onLongPress repetabale popupMode="+popupMode);//~@@@@R~
            return false;                                          //~@@@@R~
        }                                                          //~@@@@R~
                                                                   //~@@@@I~
        if (popupKeyboardId != 0) {                                //~@@@@I~
            mMiniKeyboardContainer = mMiniKeyboardCache.get(popupKey);//~@@@@I~
            if (mMiniKeyboardContainer == null) {                  //~@@@@I~
                LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(//~@@@@I~
                        Context.LAYOUT_INFLATER_SERVICE);          //~@@@@I~
                mMiniKeyboardContainer = inflater.inflate(mPopupLayout, null);//~@@@@I~
                mMiniKeyboard = (KeyboardView) mMiniKeyboardContainer.findViewById(//~@@@@I~
                        /*com.android.internal.*/R.id.keyboardView);   //~@@@@I~
                View closeButton = mMiniKeyboardContainer.findViewById(//~@@@@I~
                        /*com.android.internal.*/R.id.closeButton);    //~@@@@I~
                if (closeButton != null) closeButton.setOnClickListener(this);//~@@@@I~
                mMiniKeyboard.setOnKeyboardActionListener(new OnKeyboardActionListener() {//~@@@@I~
                    public void onKey(int primaryCode, int[] keyCodes) {//~@@@@I~
//                      mKeyboardActionListener.onKey(primaryCode, keyCodes);//mKeyboardView:parentview(not mini)//~@@@@R~
                        mKeyboardActionListener.onKey(primaryCode,null/*minikbdid*/);//mKeyboardView:parentview(not mini)//~@@@@I~
                        dismissPopupKeyboard();                    //~@@@@I~
                    }                                              //~@@@@I~
                                                                   //~@@@@I~
                    public void onText(CharSequence text) {        //~@@@@I~
                        mKeyboardActionListener.onText(text);      //~@@@@R~
                        dismissPopupKeyboard();                    //~@@@@I~
                    }                                              //~@@@@I~
                                                                   //~@@@@I~
                    public void swipeLeft() { }                    //~@@@@I~
                    public void swipeRight() { }                   //~@@@@I~
                    public void swipeUp() { }                      //~@@@@I~
                    public void swipeDown() { }                    //~@@@@I~
                    public void onPress(int primaryCode) {         //~@@@@I~
                        mKeyboardActionListener.onPress(primaryCode);//~@@@@I~
                    }                                              //~@@@@I~
                    public void onRelease(int primaryCode) {       //~@@@@I~
                        mKeyboardActionListener.onRelease(primaryCode);//~@@@@I~
                    }                                              //~@@@@I~
                });                                                //~@@@@I~
                //mInputView.setSuggest(mSuggest);                 //~@@@@I~
                Keyboard keyboard;                                 //~@@@@I~
                if (popupKey.popupCharacters != null) {            //~@@@@I~
//                  keyboard = new Keyboard(getContext(), popupKeyboardId,//~@@@@R~
                    keyboard = new AxeKbd(getContext(), popupKeyboardId,//~@@@@R~
                            popupKey.popupCharacters,this,mCurrentKey,-1,getPaddingLeft() + getPaddingRight());//~@@@@R~
                } else {                                           //~@@@@I~
                    keyboard = new Keyboard(getContext(), popupKeyboardId);//~@@@@I~
                }                                                  //~@@@@I~
		        if (Dump.Y) Dump.println("AxeKbdView setkeyboard keyboard="+keyboard.toString()+",keyboardview="+mMiniKeyboard.toString());//~@@@@R~
                mMiniKeyboard.setKeyboard(keyboard);               //~@@@@I~
                mMiniKeyboard.setPopupParent(this);                //~@@@@I~
                mMiniKeyboardContainer.measure(                    //~@@@@I~
                        MeasureSpec.makeMeasureSpec(getWidth(), MeasureSpec.AT_MOST),//~@@@@I~
                        MeasureSpec.makeMeasureSpec(getHeight(), MeasureSpec.AT_MOST));//~@@@@I~
                                                                   //~@@@@I~
                mMiniKeyboardCache.put(popupKey, mMiniKeyboardContainer);//~@@@@I~
            } else {                                               //~@@@@I~
                mMiniKeyboard = (KeyboardView) mMiniKeyboardContainer.findViewById(//~@@@@I~
                        /*com.android.internal.*/R.id.keyboardView);   //~@@@@I~
            }                                                      //~@@@@I~
            if (mWindowOffset == null) {                           //~@@@@I~
                mWindowOffset = new int[2];                        //~@@@@I~
                getLocationInWindow(mWindowOffset);                //~@@@@I~
            }                                                      //~@@@@I~
            mPopupX = popupKey.x + /*mPaddingLeft*/getPaddingLeft();                   //~@@@@I~
            mPopupY = popupKey.y + /*mPaddingTop*/getPaddingRight();                    //~@@@@I~
            mPopupX = mPopupX + popupKey.width - mMiniKeyboardContainer.getMeasuredWidth();//~@@@@I~
            mPopupY = mPopupY - mMiniKeyboardContainer.getMeasuredHeight();//~@@@@I~
            final int x = mPopupX + mMiniKeyboardContainer.getPaddingRight() + mWindowOffset[0];//~@@@@I~
            final int y = mPopupY + mMiniKeyboardContainer.getPaddingBottom() + mWindowOffset[1];//~@@@@I~
            mMiniKeyboard.setPopupOffset(x < 0 ? 0 : x, y);        //~@@@@I~
            mMiniKeyboard.setShifted(isShifted());                 //~@@@@I~
            mPopupKeyboard.setContentView(mMiniKeyboardContainer); //~@@@@I~
            mPopupKeyboard.setWidth(mMiniKeyboardContainer.getMeasuredWidth());//~@@@@I~
            mPopupKeyboard.setHeight(mMiniKeyboardContainer.getMeasuredHeight());//~@@@@I~
            mPopupKeyboard.showAtLocation(this, Gravity.NO_GRAVITY, x, y);//~@@@@I~
            mMiniKeyboardOnScreen = true;                          //~@@@@I~
            onLongPressPopup(popupKey);    //redraw by Shift-keyup//~@@@@R~//~vaayR~
            //mMiniKeyboard.onTouchEvent(getTranslatedEvent(me));  //~@@@@I~
            invalidateAllKeys();                                   //~@@@@I~
            return true;                                           //~@@@@I~
        }                                                          //~@@@@I~
        return false;                                              //~@@@@I~
    }                                                              //~@@@@I~
    public boolean setCapsed(boolean shifted) {                    //~@@@@I~
        if (mKeyboard != null) {                                   //~@@@@I~
            if (((AxeKbd)mKeyboard).setCapsed(shifted)) {          //~@@@@I~
                invalidateAllKeys();                               //~@@@@I~
                return true;                                       //~@@@@I~
            }                                                      //~@@@@I~
        }                                                          //~@@@@I~
        return false;                                              //~@@@@I~
    }                                                              //~@@@@I~
    //***********************************************              //~vc2nI~
    public boolean setShortcut(boolean shifted) {                  //~@@@@I~
        if (mKeyboard != null)                                     //~@@@@R~
        {                                                          //~@@@@I~
            if (((AxeKbd)mKeyboard).setShortcut(shifted))          //~@@@@R~
            {                                                      //~@@@@I~
    			setPopupModeShortcut(shifted);                     //~@@@@I~
                return true;                                       //~@@@@I~
            }                                                      //~@@@@I~
        }                                                          //~@@@@I~
        return false;                                              //~@@@@I~
    }                                                              //~@@@@I~
    public void updateShiftLabel(boolean Ppressed)                 //~@@@@I~
    {                                                              //~@@@@I~
        if (mKeyboard != null)                                   //~@@@@I~
            if (((AxeKbd)mKeyboard).updateShiftLabel(Ppressed))    //~@@@@R~
                invalidateAllKeys();                               //~@@@@I~
    }                                                              //~@@@@I~
    public boolean setShiftRed(boolean shifted) {                  //~@@@@I~
        if (mKeyboard != null) {                                   //~@@@@I~
            if (((AxeKbd)mKeyboard).setShiftRed(shifted)) {        //~@@@@R~
                invalidateAllKeys();                               //~@@@@I~
                return true;                                       //~@@@@I~
            }                                                      //~@@@@I~
        }                                                          //~@@@@I~
        return false;                                              //~@@@@I~
    }                                                              //~@@@@I~
    public boolean setShiftFed(boolean shifted) {                  //~vaawI~
        if (mKeyboard != null) {                                   //~vaawI~
            if (((AxeKbd)mKeyboard).setShiftFed(shifted)) {        //~vaawI~
                invalidateAllKeys();                               //~vaawI~
                return true;                                       //~vaawI~
            }                                                      //~vaawI~
        }                                                          //~vaawI~
        return false;                                              //~vaawI~
    }                                                              //~vaawI~
    public boolean setAlted(boolean shifted) {                     //~@@@@I~
        if (mKeyboard != null) {                                   //~@@@@I~
            if (((AxeKbd)mKeyboard).setAlted(shifted)) {           //~@@@@R~
                invalidateAllKeys();                               //~@@@@I~
                return true;                                       //~@@@@I~
            }                                                      //~@@@@I~
        }                                                          //~@@@@I~
        return false;                                              //~@@@@I~
    }                                                              //~@@@@I~
    public boolean setAltGred(boolean shifted) {                   //~@@@@I~
        if (mKeyboard != null) {                                   //~@@@@I~
            if (((AxeKbd)mKeyboard).setAltGred(shifted)) {         //~@@@@R~
                invalidateAllKeys();                               //~@@@@I~
                return true;                                       //~@@@@I~
            }                                                      //~@@@@I~
        }                                                          //~@@@@I~
        return false;                                              //~@@@@I~
    }                                                              //~@@@@I~
    public boolean setCtrled(boolean shifted) {                    //~@@@@I~
        if (mKeyboard != null) {                                   //~@@@@I~
            if (((AxeKbd)mKeyboard).setCtrled(shifted)) {          //~@@@@R~
                invalidateKey(modKeyIndex_Ctrl);                  //~@@@@I~
                return true;                                       //~@@@@I~
            }                                                      //~@@@@I~
        }                                                          //~@@@@I~
        return false;                                              //~@@@@I~
    }                                                              //~@@@@I~
    public boolean setAltGrSed(boolean shifted) {                  //~@@@@I~
        if (mKeyboard != null) {                                   //~@@@@I~
            if (((AxeKbd)mKeyboard).setAltGrSed(shifted)) {        //~@@@@R~
                invalidateAllKeys();                               //~@@@@I~
                return true;                                       //~@@@@I~
            }                                                      //~@@@@I~
        }                                                          //~@@@@I~
        return false;                                              //~@@@@I~
    }                                                              //~@@@@I~
    public boolean isAlted() {                                     //~@@@@R~
        if (mKeyboard != null) {                                   //~@@@@I~
            return ((AxeKbd)mKeyboard).isAlted();                  //~@@@@R~
        }                                                          //~@@@@I~
        return false;                                              //~@@@@I~
    }                                                              //~@@@@I~
    public boolean isAltGred() {                                   //~@@@@I~
        if (mKeyboard != null) {                                   //~@@@@I~
            return ((AxeKbd)mKeyboard).isAltGred();                //~@@@@R~
        }                                                          //~@@@@I~
        return false;                                              //~@@@@I~
    }                                                              //~@@@@I~
    public boolean isShiftRed()                                    //~@@@@I~
    {                                                              //~@@@@I~
        if (mKeyboard != null) {                                   //~@@@@I~
            return ((AxeKbd)mKeyboard).isShiftRed();               //~@@@@R~
        }                                                          //~@@@@I~
        return false;                                              //~@@@@I~
    }                                                              //~@@@@I~
    public boolean isShiftFed()                                    //~vaawI~
    {                                                              //~vaawI~
        if (mKeyboard != null) {                                   //~vaawI~
            return ((AxeKbd)mKeyboard).isShiftFed();               //~vaawI~
        }                                                          //~vaawI~
        return false;                                              //~vaawI~
    }                                                              //~vaawI~
    public boolean isCapsed()                                      //~@@@@I~
    {                                                              //~@@@@I~
        if (mKeyboard != null) {                                   //~@@@@I~
            return ((AxeKbd)mKeyboard).isCapsed();                 //~@@@@I~
        }                                                          //~@@@@I~
        return false;                                              //~@@@@I~
    }                                                              //~@@@@I~
    public boolean isShortcut()                                    //~@@@@I~
    {                                                              //~@@@@I~
        if (mKeyboard != null) {                                   //~@@@@I~
            return ((AxeKbd)mKeyboard).isShortcut();               //~@@@@I~
        }                                                          //~@@@@I~
        return false;                                              //~@@@@I~
    }                                                              //~@@@@I~
    public boolean isAltGrSed()                                    //~@@@@I~
    {                                                              //~@@@@I~
        if (mKeyboard != null) {                                   //~@@@@I~
            return ((AxeKbd)mKeyboard).isAltGrSed();               //~@@@@R~
        }                                                          //~@@@@I~
        return false;                                              //~@@@@I~
    }                                                              //~@@@@I~
    public boolean isCtrled()                                      //~@@@@I~
    {                                                              //~@@@@I~
        if (mKeyboard != null) {                                   //~@@@@I~
            return ((AxeKbd)mKeyboard).isCtrled();                 //~@@@@R~
        }                                                          //~@@@@I~
        return false;                                              //~@@@@I~
    }                                                              //~@@@@I~
    //***********************************************              //~@@@@I~
    public void setPopupModeShortcut(boolean Pshortcut)         //~@@@@I~
    {                                                              //~@@@@I~
        if (Pshortcut)                                             //~@@@@I~
        	if (popupMode)                                         //~@@@@I~
            {                                                      //~@@@@I~
				setPopupMode(false);                               //~@@@@I~
				((AxeKbd)mKeyboard).setShortcut(true); //restore after setpopupmode//~@@@@I~
            }                                                      //~@@@@I~
		Key key=mKeys[modKeyIndex_Kbd];                            //~@@@@M~
        key.label=getPopupLabel();                                 //~@@@@M~
        invalidateKey(modKeyIndex_Kbd);   //re-draw label                       //~@@@@I~
    }                                                              //~@@@@I~
    public boolean setPopupMode()                                  //~@@@@I~
    {                                                              //~@@@@I~
		return setPopupMode(!popupMode);                           //~@@@@I~
    }                                                              //~@@@@I~
    public boolean setPopupMode(boolean Pmode)                     //~@@@@R~
    {                                                              //~@@@@I~
    	if (popupMode==Pmode)                                      //~@@@@I~
        	return Pmode;                                          //~@@@@I~
        ((AxeKbd)mKeyboard).resetShortcut();                        //~@@@@I~
        popupMode=Pmode;                                           //~@@@@R~
        if (Dump.Y) Dump.println("AxeKbdView popupMode="+popupMode);//~@@@@I~
        int keyctr=mKeys.length;                                   //~@@@@I~
//        for (int ii=0;ii<keyctr;ii++)                            //~@@@@R~
//        {                                                        //~@@@@R~
//            Key key=mKeys[ii];                                   //~@@@@R~
//            int code=key.codes[0];                               //~@@@@R~
//            if (AxeKbdKey.isRepeatableKey(code))                 //~@@@@R~
//            {                                                    //~@@@@R~
//                if (popupMode)                                   //~@@@@R~
//                    key.repeatable=false;                        //~@@@@R~
//                else                                             //~@@@@R~
//                {                                                //~@@@@R~
//                    key.repeatable=true;                         //~@@@@R~
//                    if (Dump.Y) Dump.println("AxeKbdView repetable true="+Integer.toHexString(code));//~@@@@R~
//                }                                                //~@@@@R~
//            }                                                    //~@@@@R~
//            else    //Shift,alt,...                              //~@@@@R~
//            {                                                    //~@@@@R~
//                if (code==AxeKbdKey.KEYCODE_KBD)                 //~@@@@R~
//                {                                                //~@@@@R~
////                    if (popupMode)                             //~@@@@R~
////                        key.label=AxeKbdKey.KEYLBL_SWKBDPOPUP; //~@@@@R~
////                    else                                       //~@@@@R~
////                        key.label=AxeKbdKey.KEYLBL_SWKBD;      //~@@@@R~
//                    key.label=getPopupLabel();                   //~@@@@R~
//                    invalidateKey(ii);   //re-draw label         //~@@@@R~
//                }                                                //~@@@@R~
//            }                                                    //~@@@@R~
//        }                                                        //~@@@@R~
        for (int ii=0;ii<keyctr;ii++)                              //~@@@@I~
        {                                                          //~@@@@I~
            Key key=mKeys[ii];                                     //~@@@@I~
            int code=key.codes[0];                                 //~@@@@I~
            if (code==AxeKbdKey.KEYCODE_KBD)                       //~@@@@I~
            {                                                      //~@@@@I~
            	key.label=getPopupLabel();                         //~@@@@I~
                invalidateKey(ii);   //re-draw label               //~@@@@I~
            }                                                      //~@@@@I~
            else                                                   //~@@@@I~
            {                                                      //~@@@@I~
                if (popupMode)                                     //~@@@@I~
                    key.repeatable=false;                          //~@@@@I~
                else                                               //~@@@@I~
                {                                                  //~@@@@I~
                    key.repeatable=flickKeyTbl[ii][0].repeatable;	//restore xml value//~@@@@I~
                }                                                  //~@@@@I~
            }                                                      //~@@@@I~
        }                                                          //~@@@@I~
        return popupMode;                                          //~@@@@I~
    }                                                              //~@@@@I~
    //************************************                         //~@@@@R~
    //Label index for IM/Popup/NoPopup                             //~@@@@R~
    //************************************                         //~@@@@R~
    public String getPopupLabel()                                  //~@@@@R~
    {                                                              //~@@@@R~
        String lbl;                                                //~@@@@I~
    	if (isShortcut())                                            //~@@@@I~
        	lbl=AxeKeyValue.KEYLBL_SHORTCUT;   //if popup "Pop" else "IM"//~@@@@I~
        else                                                       //~@@@@I~
        	lbl=popupMode ? AxeKbdKey.KEYLBL_SWKBDPOPUP : AxeKbdKey.KEYLBL_SWKBD;   //if popup "Pop" else "IM"//~@@@@R~
        return lbl;                                                //~@@@@I~
    }                                                              //~@@@@R~
    //************************************                       //~@@@@R~//~vaayR~
    //*longpress popuped                                         //~@@@@R~//~vaayR~
    //************************************                       //~@@@@R~//~vaayR~
    public void onLongPressPopup(Key Ppopupkey)                  //~@@@@R~//~vaayR~
    {                                                            //~@@@@R~//~vaayR~
        int code0=Ppopupkey.codes[0];                            //~@@@@R~//~vaayR~
        if (Dump.Y) Dump.println("AxeKbdView:onLongpress keycode="+Integer.toHexString(code0));//~@@@@R~//~vaayR~
//      if (Ppopupkey.sticky)   //Shift,ctl,..                   //~@@@@R~//~vaayR~
//          Ppopupkey.on=!Ppopupkey.on; //for Keyboard:onRelease on=!on;keep old value//~@@@@R~//~vaayR~
        onRelease(code0);                                        //~@@@@R~//~vaayR~
    }                                                            //~@@@@R~//~vaayR~
//*********************************************************        //~vaagI~
//*display flick char                                              //~vaagI~
//*********************************************************        //~vaagI~
	@Override
    public/*private*/ void onBufferDraw() { //override by AxeKbdView
        if (mBuffer == null || mKeyboardChanged) {
            if (mBuffer == null || mKeyboardChanged &&
                    (mBuffer.getWidth() != getWidth() || mBuffer.getHeight() != getHeight())) {
                // Make sure our bitmap is at least 1x1
                final int width = Math.max(1, getWidth());
                final int height = Math.max(1, getHeight());
                mBuffer = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
                mCanvas = new Canvas(mBuffer);
            }
            invalidateAllKeys();
            mKeyboardChanged = false;
        }
        final Canvas canvas = mCanvas;
//      canvas.clipRect(mDirtyRect, Op.REPLACE);                   //~vc12R~
        Funcs.clipRect(canvas,mDirtyRect);                         //~vc12I~

        if (mKeyboard == null) return;

        final Paint paint = mPaint;
        final Drawable keyBackground = mKeyBackground;
        final Rect clipRegion = mClipRegion;
        final Rect padding = mPadding;
        final int kbdPaddingLeft = /*mPaddingLeft*/getPaddingLeft();
        final int kbdPaddingTop = /*mPaddingTop*/getPaddingTop();
        final Key[] keys = mKeys;
        final Key invalidKey = mInvalidatedKey;

        if (Dump.Y) Dump.println("AxeKbdView.onBufferDraw kbdPadding L="+kbdPaddingLeft+",T="+kbdPaddingTop);//~vak1I~//~vc12R~//~vc2nR~
//        if (Dump.Y) Dump.println("AxeKbdView onBuffDraw this="+this.toString());//~vc2nR~
//        if (Dump.Y) Dump.println("AxeKbdView keys="+keys.length+","+keys.toString());//~vc2nR~
        paint.setColor(mKeyTextColor);
        if (Dump.Y) Dump.println("AxeKbdView keysTextColor="+Integer.toString(mKeyTextColor));//~vc2nR~
        boolean drawSingleKey = false;
        if (invalidKey != null && canvas.getClipBounds(clipRegion)) {
          // Is clipRegion completely contained within the invalidated key?
          if (invalidKey.x + kbdPaddingLeft - 1 <= clipRegion.left &&
                  invalidKey.y + kbdPaddingTop - 1 <= clipRegion.top &&
                  invalidKey.x + invalidKey.width + kbdPaddingLeft + 1 >= clipRegion.right &&
                  invalidKey.y + invalidKey.height + kbdPaddingTop + 1 >= clipRegion.bottom) {
              drawSingleKey = true;
          }
        }
        canvas.drawColor(0x00000000, PorterDuff.Mode.CLEAR);
        final int keyCount = keys.length;
//        if (Dump.Y) Dump.println("AxeKbdView buffDraw "+this.toString());//~vc2nR~
//        if (Dump.Y) Dump.println("AxeKbdView labeltextsize="+mLabelTextSize+",keytextsize="+mKeyTextSize);//~vc2nR~
        initPaintF(mPaint,keys[0],padding); 	//for flick key    //~vaagR~
        for (int i = 0; i < keyCount; i++) {
            final Key key = keys[i];
            if (drawSingleKey && invalidKey != key) {
                continue;
            }
            int[] drawableState = key.getCurrentDrawableState();
            keyBackground.setState(drawableState);

            // Switch the character to uppercase if shift is pressed
            String label = key.label == null? null : adjustCase(key.label).toString();
            String specialKey=specialCodeLabel(key.codes[0]);      //~vaauI~
            if (specialKey!=null)                                  //~vaauI~
            	label=specialKey;                        //~vaauI~
//            if (Dump.Y) Dump.println("AxeKbdView key.label="+label);//~vc2nR~

            final Rect bounds = keyBackground.getBounds();
            if (key.width != bounds.right ||
                    key.height != bounds.bottom) {
                keyBackground.setBounds(0, 0, key.width, key.height);
            }
            canvas.translate(key.x + kbdPaddingLeft, key.y + kbdPaddingTop);
//            if (Dump.Y) Dump.println("AxeKbdView buffDraw translate X="+(key.x + kbdPaddingLeft)+",Y="+( key.y + kbdPaddingTop));//~vc2nR~
            keyBackground.draw(canvas);

//          if (label != null) {                                   //~vc2nR~
            if (label != null && key.icon == null)                 //~vc2nI~
			{                                                      //~vc2nI~
                // For characters, use large font. For labels like "Done", use small font.
                if (label.length() > 1 && key.codes.length < 2) {
                    paint.setTextSize(mLabelTextSize);
                  	if (label.length()>3)                          //~vaaxI~
                  	{                                              //~vaaxI~
                  		float rate=chkLabelWidth(key,label,paint,padding);//~vaaxI~
                    	if (rate!=(float)0.0)                      //~vaaxI~
                    		paint.setTextSize(mLabelTextSize*rate);//~vaaxI~
                  	}                                              //~vaaxI~
                    paint.setTypeface(Typeface.DEFAULT_BOLD);
                    if (Dump.Y) Dump.println("AxeKbdView.onBufferDraw large keyCode.lenghth="+key.codes.length+",label="+label+",textsize="+mLabelTextSize);//~vc2nR~
                } else {
                    paint.setTextSize(mKeyTextSize);
                    paint.setTypeface(Typeface.DEFAULT);
                    if (Dump.Y) Dump.println("AxeKbdView.onBufferDraw small keyCode.lenghth="+key.codes.length+",label="+label+",textsize="+mLabelTextSize);//~vc2nI~
                }
                // Draw a drop shadow for the text
                paint.setShadowLayer(mShadowRadius, 0, 0, mShadowColor);
                // Draw the text
                drawFlickChar(canvas,paint,i,key,padding);         //~vaagR~
//              if (Dump.Y) Dump.println("drawText center keyX="+key.x+",keyY="+key.y);//~vaagI~//~vc12R~
                canvas.drawText(label,
                    (key.width - padding.left - padding.right) / 2
                            + padding.left,
                    (key.height - padding.top - padding.bottom) / 2
                            + (paint.getTextSize() - paint.descent()) / 2 + padding.top,
                    paint);
//              if (Dump.Y) Dump.println("AxeKbdView drawText canvas="+canvas.toString()+",label="+label+",pos X="+//~vaagR~//~vc12R~//~vc2nR~
//                  ((key.width - padding.left - padding.right) / 2//~vaagR~//~vc12R~
//                          + padding.left)+",Y="+                 //~vaagR~//~vc12R~
//                  ((key.height - padding.top - padding.bottom) / 2//~vaagR~//~vc12R~
//                          + (paint.getTextSize() - paint.descent()) / 2 + padding.top));//~vaagR~//~vc12R~
                // Turn off drop shadow
                paint.setShadowLayer(0, 0, 0, 0);
            } else if (key.icon != null) {
            	if (Dump.Y) Dump.println("AxeKbdView.buffdraw icon="+key.icon);//~vc2nI~
                final int drawableX = (key.width - padding.left - padding.right
                                - key.icon.getIntrinsicWidth()) / 2 + padding.left;
                final int drawableY = (key.height - padding.top - padding.bottom
                        - key.icon.getIntrinsicHeight()) / 2 + padding.top;
                canvas.translate(drawableX, drawableY);
                key.icon.setBounds(0, 0,
                        key.icon.getIntrinsicWidth(), key.icon.getIntrinsicHeight());
                key.icon.draw(canvas);
                canvas.translate(-drawableX, -drawableY);
                drawFlickChar(canvas,paint,i,key,padding);         //~vaaiM~
            }
            canvas.translate(-key.x - kbdPaddingLeft, -key.y - kbdPaddingTop);
        }
        mInvalidatedKey = null;
        // Overlay a dark rectangle to dim the keyboard
        if (mMiniKeyboardOnScreen) {
            paint.setColor((int) (mBackgroundDimAmount * 0xFF) << 24);
            canvas.drawRect(0, 0, getWidth(), getHeight(), paint);
            if (Dump.Y) Dump.println("AxeKbdView buffdraw minikbdkey w="+getWidth()+",H="+getHeight());//~vc2nR~
        }

        if (DEBUG && mShowTouchPoints) {
            paint.setAlpha(128);
            paint.setColor(0xFFFF0000);
            canvas.drawCircle(mStartX, mStartY, 3, paint);
            canvas.drawLine(mStartX, mStartY, mLastX, mLastY, paint);
            paint.setColor(0xFF0000FF);
            canvas.drawCircle(mLastX, mLastY, 3, paint);
            paint.setColor(0xFF00FF00);
            canvas.drawCircle((mStartX + mLastX) / 2, (mStartY + mLastY) / 2, 2, paint);
        }

        mDrawPending = false;
        mDirtyRect.setEmpty();
        if (Dump.Y) Dump.println("AxeKbdView.onBufferDraw end"); //~vc12I~//~vc2nR~
    }
    //*************************************************            //~vaaxI~
    private float chkLabelWidth(Key Pkey,String Plabel,Paint Ppaint,Rect Ppadding)//~vaaxR~
    {                                                              //~vaaxI~
    	float len=FontMetrics.stringWidth(Ppaint,Plabel);          //~vaaxI~
    	float limit=Pkey.width-Ppadding.left-Ppadding.right+2;     //~vaaxR~
        if (len<limit)                                             //~vaaxI~
        	return (float)0.0;                                     //~vaaxI~
    	float rate=limit/len;                                            //~vaaxI~
        return rate;                                               //~vaaxI~
    }                                                              //~vaaxI~
    //*************************************************            //~vaagI~
    //* draw small letter for flick event *************            //~vaagI~
    //*************************************************            //~vaagI~
    private void initPaintF(Paint Ppaint,Key Pkey,Rect Ppadding)   //~vaagR~
    {                                                              //~vaagI~
//      int alpha=0xc0;                                            //~vaagR~
        float textSZ;                                              //~vaagR~
        int color;                                                 //~vaagI~
    	Paint paint;                                               //~vaagI~
        float rateH;                                               //~vaagI~
        float rateW;                                               //~vaagI~
    //***************************                                  //~vaagI~
        if (AxeG.displayPL==AxeG.PORTRAIT)                         //~vaagI~
        {                                                          //~vaagI~
        	rateH=flickKeySizeRateHP;                              //~vaagI~
        	rateW=flickKeySizeRateWP;                              //~vaagI~
        }                                                          //~vaagI~
        else                                                       //~vaagI~
        {                                                          //~vaagI~
        	rateH=flickKeySizeRateHL;                              //~vaagI~
        	rateW=flickKeySizeRateWL;                              //~vaagI~
        }                                                          //~vaagI~
        keyFW=(Pkey.width - Ppadding.left - Ppadding.right) / rateW;//~vaagI~
        keyFH=(Pkey.height - Ppadding.top - Ppadding.bottom) / rateH;//~vaagI~
    	paint=new Paint(Ppaint);	//copy of main Key ; Align Center, Alpha=255, ANTIALIAS//~vaagR~
//        textSZ=mKeyTextSize*flickKeyTextSizeRateP;  //0.5        //~vaagR~
        textSZ=keyFH*flickFontSz_KeyHeight;                        //~vaagI~
        paint.setTextSize(textSZ);                                 //~vaagI~
        paint.setTypeface(Typeface.DEFAULT);                       //~vaagI~
//      color=Ppaint.getColor();                                   //~vaagR~
//      color=(0x00ffffff-(color & 0x00ffffff))|0xff000000;	//reverse//~vaagR~
        color=COLOR_FLICKKEY;                                      //~vaagI~
        paint.setColor(color);                                     //~vaagI~
//      paint.setAlpha(alpha);                                     //~vaagR~
        paintFP=paint;                                             //~vaagR~
        if (Dump.Y) Dump.println("initPaintF mkeytextsize="+mKeyTextSize+",paint textSize="+Ppaint.getTextSize()+",flickKey textSize="+paint.getTextSize()+",descent="+paint.descent());//~vaagR~
        if (Dump.Y) Dump.println("initPaintF color="+Integer.toHexString(Ppaint.getColor())+"-->"+Integer.toHexString(color)+",mkeytextsize="+mKeyTextSize+",paint textSize="+Ppaint.getTextSize()+",flickKey textSize="+paint.getTextSize());//~vaagI~
    	paint=new Paint(paintFP);	//copy of main Key ; Align Center, Alpha=255, ANTIALIAS//~vaagI~
//      textSZ=mKeyTextSize*flickKeyTextSizeRate2; //0.33          //~vaagR~
        textSZ=keyFH*flickFontSz_KeyHeight*flickFontSz_KeyHeight2; //~vaagI~
        paint.setTextSize(textSZ);                                 //~vaagI~
        paintF2=paint;                                             //~vaagR~
    	paint=new Paint(paintFP);	//copy of main Key ; Align Center, Alpha=255, ANTIALIAS//~vaagI~
//      textSZ=mKeyTextSize*flickKeyTextSizeRateL; //0.75          //~vaagR~
        textSZ=keyFH*flickFontSz_KeyHeight;                        //~vaagI~
        paint.setTextSize(textSZ);                                 //~vaagI~
        paintFL=paint;                                             //~vaagR~
        if (Dump.Y) Dump.println("initPaintF2 flickKey textSize="+paint.getTextSize()+",descent="+paint.descent());//~vaagI~
    }//initPaintF                                                  //~vaagR~
//***************************************************              //~vaauI~
    private String getFlickLabel(boolean PnoUpper,int Pkeyindex,int Pswipedest)//~vaagR~
    {                                                              //~vaagI~
        String label;                                              //~vaagI~
        int code=0;                                                //~vaagI~
    //***************************                                  //~vaagI~
        Key[] keys = mKeys;                                        //~vc2nI~
        Key key = keys[Pkeyindex];                                 //~vc2nI~
        label=flickKeyTbl[Pkeyindex][Pswipedest].name;             //~vaagI~
        code=flickKeyTbl[Pkeyindex][Pswipedest].code;              //~vaawI~
        if (Dump.Y) Dump.println("AxeKbdView.getFlickLabel label0="+flickKeyTbl[Pkeyindex][0].name+",icon="+key.icon+",label="+label+",index="+Pkeyindex+",dest="+Pswipedest+",code0="+Integer.toHexString(flickKeyTbl[Pkeyindex][0].code)+",code="+Integer.toHexString(code));//~vc2nR~
        if (label==null)                                           //~vaagI~
        {                                                          //~vaagI~
//          code=flickKeyTbl[Pkeyindex][Pswipedest].code;          //~vaagI~//~vaawR~
            if (code==0)                                           //~vaagI~
            	return null;                                       //~vaagI~
            if (Pswipedest==1)  //CAPS                             //~vaagI~
            {                                                      //~vaagI~
                if (isCapsed())                                    //~vaagI~
                  if (code>='A' && code<='Z')	                   //~vaayI~
                    return null;                                   //~vaagI~
            }                                                      //~vaagI~
            else                                                   //~vaagI~
            if (Pswipedest==2)  //SYM                              //~vaagI~
            {                                                      //~vaagI~
                if (isShiftRed())                                  //~vaagI~
                    return null;                                   //~vaagI~
            }                                                      //~vaagI~
            else                                                   //~vaagI~
            if (Pswipedest==3)  //AltG                             //~vaagI~
            {                                                      //~vaagI~
                if (isAltGred())                                   //~vaagI~
                    return null;                                   //~vaagI~
            }                                                      //~vaagI~
            else                                                   //~vaagI~
            if (Pswipedest==4)  //AltGS                            //~vaagI~
            {                                                      //~vaagI~
                if (isAltGrSed())                                  //~vaagI~
                    return null;                                   //~vaagI~
            }                                                      //~vaagI~
            if (PnoUpper)                                          //~vaagI~
            	if (code>='A' && code <='Z')                       //~vaagI~
                	return null;                                   //~vaagI~
          if (label==null)                                         //~vaauI~
        	label = String.valueOf((char)code);                    //~vaagI~
        }                                                          //~vaagI~
        else                                                       //~vaawI~
        	if (isShiftFed())                                      //~vaawI~
        		if (AxeKeyValue.isValidExtGDK(code))               //~vaawI~
			      if (key.icon==null)	//not icon                 //~vc2nR~
        			if (code==((AxeKbd)mKeyboard).getCodeShiftF(Pkeyindex))//~vaawI~
            			return null;                               //~vaawI~
        if (Dump.Y) Dump.println("AxeKbdView.getFlickLabel label="+label+",index="+Pkeyindex+",dest="+Pswipedest+",code0="+flickKeyTbl[Pkeyindex][0].code+",code="+code);//~vaagR~//~vc12R~
        return label;                                              //~vaagI~
    }//getFlickLabel                                               //~vaagR~
//***************************************************              //~vaauI~
    public String specialCodeLabel(int Pcode)                      //~vaauR~
    {                                                              //~vaauI~
    	if (Pcode==codeSHY)                                        //~vaauI~
        	return labelSHY;                                       //~vaauI~
    	if (Pcode==codeNBSP)                                       //~vaauI~
        	return labelNBSP;                                      //~vaauI~
        return null;                                               //~vaauI~
    }                                                              //~vaauI~
//***************************************************              //~vaauI~
    public int specialLabelCode(String Plabel)                     //~vaauI~
    {                                                              //~vaauI~
    	if (Plabel.equals(labelSHY))                               //~vaauI~
        	return codeSHY;                                        //~vaauI~
    	if (Plabel.equals(labelNBSP))                              //~vaauI~
        	return codeNBSP;                                       //~vaauI~
        return -1;                                                 //~vaauI~
    }                                                              //~vaauI~
//***************************************************              //~vaauI~
    private void drawTextF(Canvas Pcanvas,Key Pkey,int Pkeyindex,int Ppos,Rect Ppadding,float PkeyFW,float PkeyFH)//~vaagR~
    {                                                              //~vaagI~
        Paint paint;                                               //~vaagI~
    	float posX,posY;                                           //~vaagI~
        String label;                                              //~vaagI~
        float fontH,fontCenter,baselineCenter;                     //~vaagI~
    //***************************                                  //~vaagI~
        if (Dump.Y) Dump.println("AxeKbdView.drawTextF keyindex="+Pkeyindex+",pos="+Ppos);//~vc2nI~
        label=getFlickLabel(true/*noupper*/,Pkeyindex,Ppos);       //~vaagR~
        if (label==null)                                           //~vaagI~
        	return;                                                //~vaagI~
        if (label.length() > 2)                                    //~vaagI~
            paint=paintF2;          //0.33                         //~vaagR~
        else                                                       //~vaagI~
        if (label.length() ==1)                                    //~vaagI~
        	if (AxeG.displayPL==AxeG.PORTRAIT)                     //~vaagI~
	            paint=paintFP;       //0.5                          //~vaagR~
            else                                                   //~vaagI~
            	paint=paintFL;      //0.75                         //~vaagR~
        else                                                       //~vaagI~
//          paint=paintFP;           //0.5                          //~vaagR~//~vc2nR~
            paint=paintF2;          //0.33                         //~vc2nI~
        fontH=-paint.ascent()+paint.descent();	//leading and descent//~vaagI~
        fontCenter=Math.max(PkeyFH,fontH)/2;                        //~vaagI~
        baselineCenter=(paint.getTextSize()-paint.descent())/2;     //~vaagI~
        switch(Ppos)                                               //~vaagI~
        {                                                          //~vaagI~
        case 1:    //topleft                                       //~vaagI~
            posX=(PkeyFW) / 2                                      //~vaagI~
                        + Ppadding.left;                           //~vaagI~
            posY=fontCenter+baselineCenter+Ppadding.top;           //~vaagR~
            break;                                                 //~vaagI~
        case 2:    //top right                                     //~vaagI~
            posX=Pkey.width-Ppadding.right-PkeyFW/2;                //~vaagI~
            posY=fontCenter+baselineCenter+Ppadding.top;           //~vaagR~
            break;                                                 //~vaagI~
        case 3:    //bottom left                                   //~vaagI~
            posX=(PkeyFW) / 2                                      //~vaagI~
                        + Ppadding.left;                           //~vaagI~
//          if (Dump.Y) Dump.println("label="+label+",FH="+PkeyFH+",fontsz="+paint.getTextSize()+",ascent="+paint.ascent()+",descent="+paint.descent());//~vaagI~//~vc12R~
            posY=Pkey.height-Ppadding.bottom-fontCenter+baselineCenter;//~vaagR~
            break;                                                 //~vaagI~
        default:    //bottom right                                 //~vaagI~
            posX=Pkey.width-Ppadding.right-PkeyFW/2;               //~vaagI~
            posY=Pkey.height-Ppadding.bottom-fontCenter+baselineCenter;//~vaagI~
        }                                                          //~vaagI~
        if (Dump.Y) Dump.println("AxeKbdView.drawTextF label="+label);//~vc12I~
      if (chkStickyLabel(Pkey,Pkeyindex,Ppos))                    //~vc2mI~//~vc2nR~
      {                                                            //~vc2mI~
        Paint paintSticky=new Paint(paint);                        //~vc2mI~
        paintSticky.setColor(COLOR_STICKY_LABEL);                 //~vc2mI~
        Pcanvas.drawText(label,posX,posY,paintSticky);             //~vc2mI~
      }                                                            //~vc2mI~
      else                                                         //~vc2mI~
        Pcanvas.drawText(label,posX,posY,paint);                   //~vaagR~
    }//drawTextF                                                   //~vaagI~
    private void drawFlickChar(Canvas Pcanvas,Paint Ppaint,int Pkeyindex,Key Pkey,Rect Ppadding)//~vaagR~
    {                                                              //~vaagI~
//        float keyFW,keyFH;                                       //~vaagR~
//        float rateH;//=flickKeySizeRate;                         //~vaagR~
//        float rateW;//=flickKeySizeRate;                         //~vaagR~
    //***************************                                  //~vaagI~
//        if (Dump.Y) Dump.println("drawFlickChar  keyW="+Pkey.width+",keyH="+Pkey.height+",padding L="+Ppadding.left+",R="+Ppadding.right+",T="+Ppadding.top+",B="+Ppadding.bottom);//~vaagR~
        if (Dump.Y) Dump.println("AxeKbdView.drawFlickChar name="+Pkey.label);//~vc12I~
        if (!AxeG.displayFlickKey)                                 //~vaagI~
        	return;                                                //~vaagI~
//        if (AxeG.displayPL==AxeG.PORTRAIT)                       //~vaagR~
//        {                                                        //~vaagR~
//            rateH=flickKeySizeRateHP;                            //~vaagR~
//            rateW=flickKeySizeRateWP;                            //~vaagR~
//        }                                                        //~vaagR~
//        else                                                     //~vaagR~
//        {                                                        //~vaagR~
//            rateH=flickKeySizeRateHL;                            //~vaagR~
//            rateW=flickKeySizeRateWL;                            //~vaagR~
//        }                                                        //~vaagR~
//        keyFW=(Pkey.width - Ppadding.left - Ppadding.right) / rateW;//~vaagR~
//        keyFH=(Pkey.height - Ppadding.top - Ppadding.bottom) / rateH;//~vaagR~
        for (int ii=1;ii<=4;ii++)                                  //~vaagI~
			drawTextF(Pcanvas,Pkey,Pkeyindex,ii,Ppadding,keyFW,keyFH);//~vaagR~
    }//drawFlickChar                                               //~vaagI~
//********************************************************         //~vaaiI~
//*set at keydown(onPress) and after timeout call onText or onKey if swipe is not detected//~vaaiI~
//********************************************************         //~vaaiI~
    @Override                                                      //~vaaiI~
    public void onTimerExpired(AxeTimer Ptimer,int Pcallctr,Object Pparm)//~vaaiI~
    {                                                              //~vaaiI~
    	if (Dump.Y) Dump.println("AxeKbdView flick TIMEOUT === swFlickTimerOn="+swFlickTimerOn);//~vaaiI~
    	if (!swFlickTimerOn)	//swi@e detected or repaet timeout occued//~vaaiI~
        	return;                                                //~vaaiI~
		swFlickTimerOn=false;                                      //~vaaiI~
        sendPendingKeyDownEvent();                                    //~vaaiI~
    }                                                              //~vaaiI~
//********************************************************         //~vaaiI~
    public void sendPendingKeyDownEvent()                                      //~vaaiI~
    {                                                              //~vaaiI~
    	if (Dump.Y) Dump.println("AxeKbdView sendPendingKeyDownEvent swpending="+swPendingKeyDownEvent);//~vaaiR~//~vc12R~
        if (!swPendingKeyDownEvent)                                //~vaaiR~
        	return;                                                //~vaaiI~
		swFlickTimerOn=false;                                      //~vaaiI~
        axeTimer.stop();                                           //~vaaiI~
        swPendingKeyDownEvent=false;                               //~vaaiR~
        if (delayedText!=null)                                     //~vaaiI~
        {                                                          //~vaaiI~
        	onText(delayedText);                                   //~vaaiI~
        }                                                          //~vaaiI~
        else                                                       //~vaaiI~
        if (delayedKeyCode!=0) //bksp=-5                           //~vaauR~
        {                                                          //~vaaiI~
        	onKey(delayedKeyCode,delayedKeyCodes);                 //~vaaiI~
        }                                                          //~vaaiI~
        delayedKeyCode=0;                                          //~vaaiI~
        delayedText=null;                                          //~vaaiI~
    }                                                              //~vaaiI~
//********************************************************         //~vc2mI~
//*chk modifier by flikkey effective                               //~vc2mI~
//********************************************************         //~vc2mI~
    private boolean chkStickyLabel(Key Pkey,int Pkeyindex,int Ppos)             //~vc2mI~//~vc2nR~
    {                                                              //~vc2mI~
        boolean rc=false;                                          //~vc2mI~
        int code=flickKeyTbl[Pkeyindex][Ppos].code;                //~vc2mI~
        switch (code)                                              //~vc2mI~
        {                                                          //~vc2mI~
    	case KEYCODE_ALTGR:	//=-10;                                //~vc2mI~
			rc=isAltGred();                                        //~vc2mI~
        	break;                                                 //~vc2mI~
		case KEYCODE_ALTGRS:	//=-11;                            //~vc2mI~
            rc=isAltGrSed();                                       //~vc2mI~
        	break;                                                 //~vc2mI~
        case KEYCODE_SHIFTR:	//SYM =-12;                        //~vc2mI~
            rc=isShiftRed();                                       //~vc2mI~
        	break;                                                 //~vc2mI~
        case KEYCODE_CAPS:	//=-16;                                //~vc2mI~
            rc=isCapsed();                                         //~vc2mI~
        	break;                                                 //~vc2mI~
        case KEYCODE_SHIFTF:	//=-18;     //display key:Fn(GdkKey)//~vc2mI~
        	rc=isShiftFed();                                       //~vc2mI~
        	break;                                                 //~vc2mI~
        case KEYCODE_SHORTCUT:	//=-17;                            //~vc2mI~
	    	rc=isShortcut();                                       //~vc2mI~
        	break;                                                 //~vc2mI~
        case KEYCODE_KBDPOPUP:	//=-14;	//not repeatable but popup swipe code//~vc2mI~
	    	rc=popupMode;                                          //~vc2mI~
        	break;                                                 //~vc2mI~
//      case KEYCODE_KBDNOPOP:	//=-15;   //back to repeatable     //~vc2mI~
//      	break;                                                 //~vc2mI~
        }                                                          //~vc2mI~
    	if (Dump.Y) Dump.println("AxeKbdView.chkStickyLabel rc="+rc+",code="+code+",label="+flickKeyTbl[Pkeyindex][Ppos].name);//~vc2mI~//~vc2nR~
        return rc;                                                 //~vc2mI~
    }                                                              //~vc2mI~
}