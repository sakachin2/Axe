//CID://+vc54R~:     update#=    89
//*************************************************************    //~va15I~
//vc54 2023/06/20 toolbin.zipfile update chk to unzip not by size but new asset file toolibin.zipfile.ts(dir output:timestamp and size)//~vc54I~
//vc4y 2023/05/22 >=android11(Api30),access all file option setting by setting-android related dialog//~vc4yI~
//vc4p 2023/03/30 android10(api29) executable permission; try Manifest:extractNativeLibs=true and getApplicationInfo().nativeLibrary//~vc4pI~
//vc4i 2023/03/28 delayed appName setting cause null value return for getpreference because sharedpreference file name use it//~vc4iI~
//vc4h 2023/03/28 Dump control by dialog                           //~vc4hI~
//vc4g 2023/03/26 Dump to private storage                          //~vc4gI~
//vc42 2023/03/25 api33 support;deprecated display.getSize()       //~vc42I~
//vc2X 2020/09/19 return sdpath even no write permission for utrace//~vc2XI~
//vc2S 2020/09/12 add ruler width option                           //~vc2SI~
//vc2R 2020/09/11 Debug option:reverse HelpLang                    //~vc2LI~
//vc2L 2020/09/02 display TMPDIR                                   //~vc2LI~
//vc2K 2020/08/28 receive intent(View/Edit)                        //~vc2KI~
//vc2D 2020/08/19 (Bug)kbd send not to Dialog but to AxeScreen when KbdDialogHW opened after AxeDialog Open//~vc2DI~
//vc2j 2020/07/27 IMopen key on hardKbd                            //~vc2jI~
//vc2g 2020/07/26 AltGr key option                                 //~vc2gI~
//vc1w 2020/07/06 AxeKbd updatelog extends KbdLayoutHW             //~vc1wI~
//vc1v 2020/07/06 (Bug)isLangJP setting                            //~vc1vI~
//vc1r 2020/06/26 avoid ime popup implicitly                       //~vc1pI~
//vc1p 2020/06/24 display path env                                 //~vc1pI~
//vc1h 2020/06/22 set UTRACE default option to console             //~vc1hI~
//vc1c 2020/06/19 /proc/version access denied, use Build.VERSION.SDK_INT R RELEASE//~vc1cI~
//vc10 2020/06/14 update Dump to write to terminal(copy from BTMJ5)//~vc10I~
//vayd:141125 (Axe)modifier reset option                           //~vaydI~
//vayb:141125 (Axe)Disply:getWidth/getHeight was deprecated at aoi13(HONNEYCOMB_MR2) change to getSize//~vaybI~
//vaya:141125 (Axe)utilize actionbar:home button click event(customizable by settion,default is home)//~vayaI~
//vay9:141124 (Axe)checkbox internal option(trace,dump) by checkbox//~vay9I~
//vay0:140710 (Axe)jni exception handling                          //~vay0I~
//vaiq:130606 Axe:issue initial setup Alert(Be paitient)           //~vaiqI~
//vaim:130601 send mouse rbutton event by long press on AxeScreen  //~vaimI~
//vaii:130601 Axe:if FLAG_NOT_MODAL on,setCanceledOnTouchOutside is ignore.//~vaihI~
//            set default of canceloutside to false.               //~vaihI~
//vaih:130531 Axe:option to close xekbd dialog when touch outside of dialog//~vaihI~
//vai3:130525 (Axe)hide internal option when release version       //~vai3I~
//v6k1:130524 (Axe)sbcsmap tbl recreate option                     //~v6k1I~
//vad2:120423 (Axe)Charset option by Arm related option dialog     //~vad2I~
//vab7:120122 (Axe)Android4:getTextWidth returns width=0 if request count is too large//~vab7I~
//vab0:120119 (Axe)android3(honeycomb) tablet has Ssystem bar at bottom that hide xe button line with 48pix height//~vab0I~
//vaaD:120114 install highlight-2.16                               //~vaaDI~
//vaag:111223 (Axe)display small char generated by flick on keyboard key//~vaagI~
//*************************************************************    //~vaagI~
//Globals                                                          //~va15R~
//*************************************************************    //~va15I~
package com.xe.Axe;                                                //~va15I~

import java.util.Locale;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.net.Uri;
import android.view.LayoutInflater;
import android.view.View;
import android.os.Build;                                           //~vab0R~

import com.xe.Axe.kbd.AxeKbdDialogHW;
import com.xe.Axe.kbd.ims.KeyboardView;
public class AxeG                                                  //~va15R~
{                                                                  //~va15I~
//  public static String PREFKEY_INTERNAL_OPTIONS="InternalOption";//~vay9R~
    public static final String PREFKEY_DEBUG_TRACE="DebugTrace";   //~vay9I~
    public static final String PREFKEY_DEBUG_DUMP="DebugDump";     //~vay9I~
    public static final String PREFKEY_DEBUG_DEBUG="DebugDebug";   //~vay9I~
	public static final String PREFKEY_HOMEBUTTONKEY="HomeButrtonKey";//~vayaI~
	public static String PREFKEY_ENV_PATH="EnvPath";               //~1A26I~
	public static String PREFKEY_CHARSET="LocaleCharset";          //~vad2I~
//    public static String PREFKEY_IMETYPE="IMEType";              //~1830R~
                                                                   //~1A03I~
	public static String PREFKEY_REPEAT_DELAY="RepeatDelay";       //~1A09R~
	public static int DEFAULT_REPEAT_DELAY=800;   //from kbd/ims/KeyboardView//~1A09R~//~vab7R~
	public static int MIN_REPEAT_DELAY=100;                        //~1A09R~
    public static int repeatDelay=DEFAULT_REPEAT_DELAY;            //~1A09R~
                                                                   //~vaagI~
	public static String PREFKEY_DISPLAY_FLICKKEY="DisplayFlickKey";//~vaagI~
	public static final boolean DEFAULT_DISPLAY_FLICKKEY=true;     //~vaagR~
    public static boolean displayFlickKey=DEFAULT_DISPLAY_FLICKKEY;//~vaagI~
                                                                   //~1A09I~
	public static String PREFKEY_OUTSIDE_TOUCH="OutsideTouch";     //~vaihR~
	public static final boolean DEFAULT_OUTSIDE_TOUCH=false;       //~vaihR~//~vaiiR~
    public static boolean cancelXekbdByOutsideTouch=DEFAULT_OUTSIDE_TOUCH;//~vaihR~
	public static String PREFKEY_RESET_MODIFIER="ResetModifier";   //~vaydI~
	public static final boolean DEFAULT_RESET_MODIFIER=true;       //~vaydR~
    public static boolean resetModifier=DEFAULT_RESET_MODIFIER;    //~vaydI~
                                                                   //~vai3I~
	public static String PREFKEY_REPEAT_SPEED="RepeatSpeed";       //~1A09I~
	public static int DEFAULT_REPEAT_SPEED=100;   //from kbd/ims/KeyboardView 50-->100(10 char per seconds)//~1A09I~
	public static int MIN_REPEAT_SPEED=33;        //30 char/sec    //~1A09I~
    public static int repeatSpeed=DEFAULT_REPEAT_SPEED;            //~1A09I~
                                                                   //~1A09I~
	public static String PREFKEY_SWIPE_TIMEOUT="SwipeTimeout";     //~1A09I~
	public static int DEFAULT_SWIPE_TIMEOUT=300;                   //~1A09I~
	public static int MIN_SWIPE_TIMEOUT=100;                       //~1A09I~
    public static int swipeTimeout;                                //~1A09I~
                                                                   //~1A03I~
	public static String PREFKEY_RULER_WIDTH="RulerWidth";         //~vc2SI~
	public static int DEFAULT_RULER_WIDTH=1;                       //~vc2SI~
	public static int MAX_RULER_WIDTH=10;                          //~vc2SI~
    public static int RulerWidth;                                  //~vc2SI~
                                                                   //~vc2SI~
	public static String PREFKEY_LONGPRESS_TIMEOUT="LongPressTimeout";//~vaimI~
	public static int DEFAULT_LONGPRESS_TIMEOUT=1000;              //~vaimI~
	public static int MIN_LONGPRESS_TIMEOUT=500;                   //~vaimR~
    public static int longPressTimeout;                            //~vaimI~
                                                                   //~vaimI~
	public static String PREFKEY_SWIPE_TRAVEL="SwipeTravel";       //~1A03I~
	public static int DEFAULT_SWIPE_TRAVEL=10;      //percentage//~1A03I~
	public static int MIN_SWIPE_TRAVEL=10;          //percentage//~1A03I~
    public static int swipeTravel;                                 //~1A03I~
                                                                   //~1A06I~
	public static String PREFKEY_HELPSZ="HelpSize";                //~1A06I~
	public static String PREFKEY_TOOLBINSZ="ToolBinSize";          //~1A25I~
	public static String PREFKEY_TOOLBINTS="ToolBinTS";            //~vc54I~
	public static String PREFKEY_HTMLHELPSZ="HtmlHelpSize";        //~vc1hI~
	public static String PREFKEY_HIGHLIGHTSZ="HighlightSize";      //~vaaDI~
                                                                   //~1A03I~
	public static String PREFKEY_NO_ALLFILE="NoAllFile";           //~vc4yI~
                                                                   //~vc4yI~
    public static final String PKEY_STARTUPCTR="startupctr";       //~vaiqI~
    public static int startupCtr;                                  //~vaiqI~
                                                                   //~vc2gI~
    public static final String PREFKEY_ALTGRKEY="AltGrKey";           //~vc2gI~
    public static final int    DEFAULT_ALTGRKEY=0;	//none         //~vc2gI~
    public static final String PREFKEY_OPENIMKEY="OpenIMKey";      //~vc2jI~
    public static final int    DEFAULT_OPENIMKEY=0;	//none         //~vc2jI~
    private static final String DEFAULT_TMPDIR="/data/local/tmp";  //~vc2LR~
    public static int keyAltGr;                                    //~vc2gI~
    public static int keyOpenIM;                                   //~vc2jI~
                                                                   //~vaiqI~
	public static Activity activity;                                      //~va15I~
//	public static SharedPreferences pref;                          //~vc4hR~
	public static Context context;
	public static Axe main;
	public static AxeView axeView;
	public static Resources  resource;                             //~1527I~
    public static LayoutInflater inflater;                         //~1527I~
    public static AxeMenu axeMenu;                                    //~1527I~
    public static View mainView;                                   //~1527I~
    public static View[] mainViewPL=new View[2];                   //~1606I~
    public static String appName;                                  //~1527R~
    public static AxeButtonLayout axeButtonLayout;                       //~1528I~
//  public static AxeAlert  axeAlert;                              //~vaiqR~
    public static AxeKey axeKey;//~1528I~
    public static AxeMouse axeMouse;                               //~1621I~
    public static AxeKeyAction axeKeyAction;                       //~1607I~
    public static AxeIME axeIME;                                   //~1826I~
    public static AxeJNI axeJNI;                                   //~1713I~
    public static Axecsub axecsub;                                 //~1A22I~
    public static AxeActivity axeActivity;                         //~1A18I~
    public static Axegxedlg axegxedlg;                             //~1715I~
    public static int optTrace;                                    //~1922R~
    public static final int TRACEO_ON=0x01;                        //~1926I~
    public static final int TRACEO_REOPEN=0x10;                    //~1926I~
    public static final int TRACEO_LOGCAT=0x08;                    //~1926I~
    public static final int TRACEO_REMAP=0x0100;  //sbcsmap tbl recreate//~v6k1I~
//  public static final int TRACEO_NOTREMAP=0x0100;  //sbcsmap tbl recreate//~vc2XI~
    public static final int TRACEO_NOTREMAP=0x0200;  //sbcsmap tbl recreate//~vc2XI~
    public static int optDump;                                     //~1922I~
    public static int optDebug;                                    //~vay0I~
    public static final int DEBUGO_ABEND=0x01;  //ndk sigsegv by double Esc//~vay0R~
    public static final int DEBUGO_UERREXIT=0x02;  //ndk sigsegv by double Esc//~vay0I~
    public static final int DEBUGO_HELP_REVERSELANG=0x04;  //ndk sigsegv by double Esc//~vc2RR~
    public static String encoding="UTF-8";	                       //~1A09R~
                          //~1715I~
                                                                   //~1527I~
    public static int[]  mainLayoutIdPL=new int[]{R.layout.main,R.layout.main_landscape};//~1606R~
    public static boolean useLandscapeMainView;                    //~1606I~
                                                                   //~1606I~
    public static int  listViewRowIdMultipleChoice=android.R.layout.simple_list_item_multiple_choice;//~1527R~
    public static String language;                                 //~1531I~
    public static boolean isLangJP;
 	public static boolean isDebuggable;                            //~vai3I~
    public static int screenW,screenH;                             //~1606R~
    public static int displayW,displayH;                           //~1821R~
                                                                   //~1821I~
    public static int displayPL; //0:Portrait,1:landscape          //~1821I~
    public static final int PORTRAIT=0;                            //~1821I~
    public static final int LANDSCAPE=1;                           //~1821I~
                                                                   //~1821I~
    public static float screenDip2Pix;
    public static AxeScreen axeScreen; 
    public static int titleBarTop,titleBarBottom;//~1606I~   
                                                                   //~vab0I~
    public static int bottomSpaceHeight;                           //~vab0I~
    public static final int SYSTEMBAR_HEIGHT=48;                   //~vab0I~
	public static String PREFKEY_BOTTOMSPACE_HIGHT="BottomSpaceHeight";//~vab0I~
                                                                   //~vab0I~
    public static int osVersion;                                   //~vab0I~
    public static int osVersionRelease;                            //~vc1cI~
    public static final int GINGERBREAD=9; //android2.3            //~vab7I~
    public static final int HONEYCOMB=11; //android3.0 (GINGERBREAD=9)//~vab0I~
    public static final int HONEYCOMB_MR2=13; //android3.2         //~vaybI~
    public static final int ICE_CREAM_SANDWICH=14; //android4.0    //~vab0I~
    public static final int API29=29;                              //~vc4pI~
                                                                   //~vab0I~
//  public static int maxKeyCode;                                  //~1815R~
    public static String Glocale;                                  //~1820I~
//  public static String internalOptions;                          //~vay9R~
//    public static int imeType;                                   //~1830R~
//    public static final int IMETYPE_DIALOG=1;                    //~1830R~
//    public static final int IMETYPE_NODIALOG=2;                  //~1830R~
//    public static final int IMETYPE_NOCONFIRM=0x100;             //~1830R~
	public static Thread mainThread;                               //~1126I~//~1827I~
	public static String intentData;                               //~1A17R~
	public static String intentAction;                             //~1A17I~
	public static int hardKeyboard=-1;                             //~vc1rR~
	public static AxeKbdDialogHW axeKbdDialogHW;                   //~vc1rI~
	public static AxeDlgKbdLayoutHW axeDlgKbdLayoutHW;             //~vc1rR~
	public static AxeDlgKbdLayout axeDlgKbdLayout;                 //~vc1wI~
	public static AxeDialog axeDialog;                             //~vc2DI~
	public static AxeBCR axeBCR;                                   //~vc2KI~
    public static boolean   swNavigationbarGestureMode;                  //~vaefR~//~vc42I~
    public static int       scrNavigationbarBottomHeightA11;             //~vaefR~//~vc42I~
    public static int       scrNavigationbarRightWidthA11;               //~vaefI~//~vc42I~
    public static int       scrStatusBarHeight;	//API30, by insets     //~vaj0I~//~vc42I~
    public static int       scrNavigationbarLeftWidthA11;                //~vaefI~//~vc42I~
//*********************************************                    //~va15I~
	public static void init(Axe Paxe)                    //~va15I~
    {                                                              //~va15I~
    	osVersion=Build.VERSION.SDK_INT;                //~vab0I~
    	Gxeh.osVersion=osVersion;	//notify to xe through Gxeh    //~vab7I~
    	osVersionRelease=Utils.strToNum(Build.VERSION.RELEASE,0);                    //~vc1cI~
    	Gxeh.osVersionRelease=osVersionRelease;	//notify to xe through Gxeh//~vc1cI~
    	main=Paxe;
		activity=(Activity)Paxe;                                   //~1527R~
    	context=(Context)Paxe;                                     //~1527R~
                                                                   //~vc4iI~
        resource=main.getResources();	//getResourceString use this//~vc4iI~
        appName=Utils.getResourceString(R.string.app_name);        //~vc4iM~
                                                                   //~1A17I~
        isDebuggable=Utils.isDebuggable(context);             //~v107I~//~vai3I~
  		int dump=getParameter(PREFKEY_DEBUG_DUMP,0);               //~vc4hI~
        if (isDebuggable)                                          //~vc4yR~
        {                                                          //~vc4gI~//~vc4yR~
//          Dump.open("");  //write all to Terminal log,not exception only//~vc10I~//~vc4gR~//~vc4yR~
//          Dump.open("Dump.txt",false/*swSD*/);    //write all to Terminal log,not exception only//~vc4gR~//~vc4hR~//~vc4yR~
            Dump.open(dump,false/*swSD*/);  //write all to Terminal log,not exception only//~vc4hR~//~vc4yR~//~vc54R~
//          Dump.open(1,false/*swSD*/); //TODO test //write all to Terminal log,not exception only//~vc54R~
        }                                                          //~vc4gI~//~vc4yR~
//      else  //TODO test                                          //~vc4yR~//~vc54R~
//        	Dump.open("");	//write all to Terminal log,not exception only//~vc4yI~//~vc54R~
        startupCtr=AxeProp.getPreference(PKEY_STARTUPCTR,0);     //~vaiqI~
        AxeProp.putPreference(PKEY_STARTUPCTR,startupCtr+1);     //~vaiqI~
                                                                   //~vai3I~
    	Intent receivedIntent=activity.getIntent();                                    //~1A16R~//~1A17I~
        intentAction=receivedIntent.getAction();                             //~1A16I~//~1A17I~
        if (!intentAction.equals(Intent.ACTION_MAIN))	//implicit start; VIEW/EDIT//~1A17I~
        {                                                          //~1A16I~//~1A17I~
    	    Uri uri=receivedIntent.getData();                              //~1A16R~//~1A17R~
            if (uri!=null)                                         //~1A17I~
            	intentData=uri.toString();                         //~1A17I~
        }                                                          //~1A16I~//~1A17I~
//		pref=context.getSharedPreferences("PreferencesEx",Context.MODE_PRIVATE);//~va15I~//~vc4hR~
//      resource=main.getResources();                              //~1527I~//~vc4iR~
        inflater=main.getLayoutInflater();                         //~1527I~
//      appName=Utils.getResourceString(R.string.app_name);       //~1527I~//~vc4iR~
		Gxeh.localeCharset=getParameter(PREFKEY_CHARSET);          //~vad2I~
		Gxeh.envPath=getParameter(PREFKEY_ENV_PATH);               //~1A26R~
		Gxeh.envPath=AxeDlgArmOption.chkEnvPath(true/*axeG*/,Gxeh.envPath);//~1A26R~
//  	internalOptions=getParameter(PREFKEY_INTERNAL_OPTIONS);//~1824I~//~vay9R~
//  	internalOptions=AxeDlgArmOption.chkInternalOptions(true/*axeG*/,internalOptions);//~vay9R~
//		int trace=getParameter(PREFKEY_DEBUG_TRACE,0);             //~vay9I~//~vc1hR~
//  	int trace=getParameter(PREFKEY_DEBUG_TRACE,TRACEO_LOGCAT); //~vc1hI~//~vc2SR~
//  	int trace=getParameter(PREFKEY_DEBUG_TRACE,TRACEO_ON|TRACEO_LOGCAT);//~vc2SR~
    	int trace=getParameter(PREFKEY_DEBUG_TRACE,TRACEO_ON);   //TODO test//~vc2SI~
// 		int dump=getParameter(PREFKEY_DEBUG_DUMP,0);               //~vay9I~//~vc4hR~
	  	int debug=getParameter(PREFKEY_DEBUG_DEBUG,0);             //~vay9I~
    	AxeDlgArmOption.chkInternalOptions(true/*axeG*/,trace,dump,debug);//~vay9I~
		int homebuttonkey=AxeG.getParameter(PREFKEY_HOMEBUTTONKEY,R.id.HOMEBUTTON_NONE);//~vayaI~
    	AxeDlgArmOption.chkHomeButtonKey(true/*axeG*/,homebuttonkey);//~vayaI~
//		imeType=getParameter(PREFKEY_IMETYPE,0);                   //~1826I~
        Locale locale=Locale.getDefault();
        Glocale=locale.toString();	//ja_JP                        //~1820R~
//      language=",country="+locale.getCountry(); //JP             //~1820R~
//      language=",lang="+locale.getLanguage();   //ja             //~1820R~
//      language=",name"+locale.getDisplayName(); //nihongo(nihon) by japanese//~1820R~
        language=locale.getLanguage();   //ja(Locale.JAPANESE) or ja_JP(Locale.JAPAN)//~1531R~
//      isLangJP=language.substring(0,2).equals(Locale.JAPANESE);  //~vc1vR~
        isLangJP=language.substring(0,2).equals(Locale.JAPANESE.getLanguage());  //~@@@@I~//~v102I~//~vc1vI~
//      maxKeyCode=KeyEvent.getMaxKeyCode();  //not versiondependent//~1815R~
//    	imm=(InputMethodManager)AxeG.context.getSystemService(Context.INPUT_METHOD_SERVICE);//~va15I~//~1825I~//~1826R~
		mainThread=Thread.currentThread();                      //~1126I~//~1827I~
                                                                   //~vaagI~
        if (osVersion>=HONEYCOMB && osVersion<ICE_CREAM_SANDWICH)  //android3 api11-13//~vab0R~
        	bottomSpaceHeight=SYSTEMBAR_HEIGHT;                    //~vab0I~
		int sbh=getParameter(PREFKEY_BOTTOMSPACE_HIGHT,-1);        //~vab0I~
        if (sbh>=0)                                                //~vab0I~
        	bottomSpaceHeight=sbh;                                 //~vab0I~
                                                                   //~vab0I~
		displayFlickKey=getParameter(PREFKEY_DISPLAY_FLICKKEY,DEFAULT_DISPLAY_FLICKKEY);//~vaagI~
                                                                   //~vaagI~
		repeatDelay=getParameter(PREFKEY_REPEAT_DELAY,DEFAULT_REPEAT_DELAY);//~1A09I~
		repeatSpeed=getParameter(PREFKEY_REPEAT_SPEED,DEFAULT_REPEAT_SPEED);//~1A09I~
        KeyboardView.REPEAT_START_DELAY=repeatDelay;               //~1A09I~
        KeyboardView.REPEAT_INTERVAL=repeatSpeed;               //~1A09I~
		swipeTimeout=getParameter(PREFKEY_SWIPE_TIMEOUT,DEFAULT_SWIPE_TIMEOUT);//~1A03I~
		swipeTravel=getParameter(PREFKEY_SWIPE_TRAVEL,DEFAULT_SWIPE_TRAVEL);//~1A03I~
                                                                   //~vc2SI~
		RulerWidth=getParameter(PREFKEY_RULER_WIDTH,DEFAULT_RULER_WIDTH);//~vc2SI~
                                                                   //~vai3I~
		cancelXekbdByOutsideTouch=getParameter(PREFKEY_OUTSIDE_TOUCH,DEFAULT_OUTSIDE_TOUCH);//~vaihR~
		resetModifier=getParameter(PREFKEY_RESET_MODIFIER,DEFAULT_RESET_MODIFIER);//~vaydI~
		longPressTimeout=getParameter(PREFKEY_LONGPRESS_TIMEOUT,DEFAULT_LONGPRESS_TIMEOUT);//~vaimI~
		Gxeh.envVarPATH=System.getenv("PATH");                     //~vc1pI~
		Gxeh.envVarNativePATH=new String(Gxeh.envVarPATH);         //~vc1pI~
		Gxeh.envVarTMPDIR=System.getenv("TMPDIR");                 //~vc2LI~
        if (Gxeh.envVarTMPDIR==null)                               //~vc2LI~
	        Gxeh.envVarTMPDIR=DEFAULT_TMPDIR;                      //~vc2LI~
		getAltGrKey();                                             //~vc2gR~
		keyOpenIM=getParameter(PREFKEY_OPENIMKEY,DEFAULT_OPENIMKEY);//~vc2jI~
		axeBCR=new AxeBCR();                                       //~vc2KI~
    }                                                              //~va15I~
//*********************************************                    //~vc2gI~
	private static void getAltGrKey()                              //~vc2gR~
    {                                                              //~vc2gI~
		keyAltGr=getParameter(PREFKEY_ALTGRKEY,DEFAULT_ALTGRKEY);  //~vc2gI~
        AxeDlgKbdLayoutHW.setAltGrKey();                           //~vc2gI~
	}                                                              //~vc2gI~
//*********************************************                    //~vc2gI~
	public static void putAltGrKey(int PaltGrKey)                  //~vc2gR~
    {                                                              //~vc2gI~
    	keyAltGr=PaltGrKey;                                        //~vc2gI~
		setParameter(PREFKEY_ALTGRKEY,PaltGrKey);                  //~vc2gI~
        AxeDlgKbdLayoutHW.setAltGrKey();                           //~vc2gI~
	}                                                              //~vc2gI~
//*********************************************                    //~1827I~
    public static boolean isMainThread()                           //~1126M~//~1827I~
    {                                                              //~1126M~//~1827I~
    	return (Thread.currentThread()==AxeG.mainThread);              //~1126M~//~1827I~
    }                                                              //~1126M~//~1827I~
//*********************************************                    //~va15I~
//* configration parameter                                         //~1527I~
//*********************************************                    //~1527I~
	public static boolean getParameter(String Pkey,boolean Pdefault)//~1527I~
    {                                                              //~1527I~
    	String value=AxeProp.getPreference(Pkey);                  //~1527I~
        if (value.equals(""))                                      //~1527I~
        	return Pdefault;                                       //~1527I~
        boolean rc=value.equals("1");                              //~1527I~
        return rc;                                                 //~1527I~
    }                                                              //~1527I~
	public static int getParameter(String Pkey,int Pdefault)   //~1826I~
    {                                                              //~1826I~
    	String value=AxeProp.getPreference(Pkey);                  //~1826I~
//      System.out.println("AxeG.getParameter key="+Pkey+",defualt="+Pdefault+",value="+value); //TODO test//~vc4hI~//~vc4iR~
        if (value.equals(""))                                      //~1826I~
        	return Pdefault;                                       //~1826I~
        int rc=Utils.strToNum(value,0/*default*/);                 //~1826I~
//      System.out.println("AxeG.getParameter key="+Pkey+",defualt="+Pdefault+",rc="+rc); //TODO test//~vc4hI~//~vc4iR~
        return rc;                                                 //~1826I~
    }                                                              //~1826I~
	public static String getParameter(String Pkey)           //~1824I~//~1826R~
    {                                                              //~1824I~
    	String value=AxeProp.getPreference(Pkey);                  //~1824I~
        return value;                                              //~1824I~
    }                                                              //~1824I~
//*********************                                            //~1527R~
	public static void setParameter(String Pkey,boolean Pvalue)    //~1527I~
    {                                                              //~1527I~
    	String v=(Pvalue?"1":"0");                                 //~1527I~
        AxeProp.putPreference(Pkey,v);	                           //~1527I~
    }                                                              //~1527I~
//*********************                                            //~1826I~
	public static void setParameter(String Pkey,int Pvalue)        //~1826I~
    {                                                              //~1826I~
    	String v=Integer.toString(Pvalue);                         //~1826I~
        AxeProp.putPreference(Pkey,v);                             //~1826I~
//      System.out.println("AxeG.setParameter key="+Pkey+",Pvalue="+Pvalue+",v="+v); //TODO test//~vc4hI~//~vc4iR~
    }                                                              //~1826I~
//*********************                                            //~1824I~
	public static void setParameter(String Pkey,String Pvalue)//~1824I~//~1826R~
    {                                                              //~1824I~
        AxeProp.putPreference(Pkey,Pvalue);                        //~1824I~
    }                                                              //~1824I~
//*********************                                            //~1824I~
	public static void setDumpOption(boolean Popt)                 //~1824I~
    {                                                              //~1824I~
        Dump.setOption(Popt);                                  //~1824I~
    }                                                              //~1824I~
//*********************                                            //~vc1rI~
	public static void setHardKeyboard(Configuration Pcfg)         //~vc1rR~
    {                                                              //~vc1rI~
    	hardKeyboard=Pcfg.hardKeyboardHidden;                     //~vc1rR~
        if (Dump.Y) Dump.println("AxeG.serHardKeyboardActive hardKeyboard="+hardKeyboard);//~vc1rR~
    }                                                              //~vc1rI~
//*********************                                            //~vc1rI~
	public static boolean isHardKeyboardActive()                   //~vc1rI~
    {                                                              //~vc1rI~
    	boolean rc=hardKeyboard== Configuration.HARDKEYBOARDHIDDEN_NO/*1*/;//~vc1rI~
        if (Dump.Y) Dump.println("AxeG.isHardKeyboardActive hardKeyboard="+hardKeyboard+",rc="+rc);//~vc1rI~
        return rc;                                                 //~vc1rI~
    }                                                              //~vc1rI~
//*********************                                            //~vc4yI~
	public static boolean isNoAllFile()                            //~vc4yI~
    {                                                              //~vc4yI~
		boolean rc=getParameter(PREFKEY_NO_ALLFILE,false);         //~vc4yI~
        if (Dump.Y) Dump.println("AxeG.isNoAllFile rc="+rc);       //~vc4yI~
        return rc;                                                 //~vc4yI~
    }                                                              //~vc4yI~
//*********************************************                    //~vc4yI~
	public static void setNoAllFile(boolean PnoAllFile)            //~vc4yI~
    {                                                              //~vc4yI~
		setParameter(PREFKEY_NO_ALLFILE,PnoAllFile);               //~vc4yI~
        if (Dump.Y) Dump.println("AxeG.setNoAllFile PnoAllFile="+PnoAllFile);//~vc4yI~
	}                                                              //~vc4yI~
}//class                                                           //~va15R~
