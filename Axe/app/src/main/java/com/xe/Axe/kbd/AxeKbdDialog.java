//*CID://+vaygR~: update#= 37;                                     //~vaygR~
//**********************************************************************//~vaagI~
//vayg:141125 (Axe)vayc occurs after orientation changed           //+vaygR~
//vayc:141125 (Axe)XeKbdDialog is not aligned at bottom when orientation:horizontal//~vaycR~
//vayb:141125 (Axe)Disply:getWidth/getHeight was deprecated at aoi13(HONNEYCOMB_MR2) change to getSize//~vaybI~
//vaii:130601 Axe:if FLAG_NOT_MODAL on,setCanceledOnTouchOutside is ignore.//~vaiiI~
//            set default of canceloutside to false.               //~vaiiI~
//vaih:130531 Axe:option to close xekbd dialog when touch outside of dialog//~vaihI~
//vaif:130530 Axe:give focus to Axescreen at xeKbd dialog shown    //~vaifI~
//vaat:120103 (Axe:Bug)xekbd should support orientaion change      //~vaagI~
//vaag:111223 (Axe)display small char generated by flick on keyboard key//~vaagI~
//**********************************************************************//~vaagI~
package com.xe.Axe.kbd;                                            //~1918R~

import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.graphics.Point;
import android.view.Display;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.FrameLayout;
import android.view.WindowManager;                                 //~1902I~
//~1918I~
import com.xe.Axe.AxeKeyValue;
import com.xe.Axe.AxeLstKbdLayout;
import com.xe.Axe.AxeTimerI;                                       //~1918I~
import com.xe.Axe.AxeTimer;                                        //~1918I~
import com.xe.Axe.AxeView;
import com.xe.Axe.Dump;
import com.xe.Axe.AxeG;
import com.xe.Axe.R;

//import com.canvastest2.Canvastest2.ImageCanvas;                  //~1918R~
                                                                   //~@@@@I~
//****************************************************             //~1920I~
//*instance created at AxeIME only once                            //~1920I~
//****************************************************             //~1920I~
public class AxeKbdDialog extends Dialog                           //~1918R~
    	implements AxeSoftKbd.OnSoftKbdListener,AxeTimerI          //~1A08R~
{                                                                  //~1918R~
	private static final int DIALOG_THEME=R.style.ExtKeyKbdTheme;//style for fullscreen//~1918I~
	private static final int DIALOG_LAYOUT=R.layout.dialogkbd;     //~1918I~
	private static final int DIALOG_FRAMELAYOUT=R.id.KBDFRAME;     //~1918I~
	private ViewGroup layoutView;                                  //~1902I~
	private FrameLayout frameLayout;                                   //~1902I~
	private View kbdView; 
	private Context context;//~1902I~
	private AxeSoftKbd axeSoftKbd;                                 //~1919R~
    private boolean modeChange;
    private boolean isShown;//~1918I~
    private boolean isConstructor;                                 //~vaygI~
//************************************************                 //~1918I~
    public AxeKbdDialog(Context Pcontext)                          //~1918R~
    {                                                              //~1902R~
     	super(Pcontext,DIALOG_THEME);//style for fullscreen       //~1918R~
        context=Pcontext;                                          //~1918I~
                                                                   //~1902I~
        Display display=((WindowManager)(context.getSystemService(Context.WINDOW_SERVICE))).getDefaultDisplay();//~1902I~
//      int displayW=display.getWidth();                           //~vaybR~
//      int displayH=display.getHeight();                          //~vaybR~
        Point dsz=AxeView.getDisplayRegion();                      //~vaybR~
        int displayW=dsz.x;                                        //~vaybI~
        int displayH=dsz.y;                                        //~vaybI~
        if (Dump.Y) Dump.println("display W="+displayW+",H="+displayH);//~1902I~
		layoutView=(ViewGroup)(AxeG.inflater.inflate(DIALOG_LAYOUT,null));//~1918R~
//      FrameLayout frameLayout=(FrameLayout)(layoutView.findViewById(DIALOG_FRAMELAYOUT));//~1918R~//~vaagR~
        frameLayout=(FrameLayout)(layoutView.findViewById(DIALOG_FRAMELAYOUT));//~vaagI~
        kbdView=initKbd();                                         //~1902I~
        if (Dump.Y) Dump.println("kbdview W="+kbdView.getWidth()+",H="+kbdView.getHeight());//~vaybI~
                                                                   //~vaybI~
        frameLayout.addView(kbdView);                                //~1902I~
//      dialogKbd.requestWindowFeature(Window.FEATURE_NO_TITLE);   //~1902R~
//      dialogKbd.getWindow().setLayout(LayoutParams.FILL_PARENT/*width*/,Layoutparams.WRAP_CONTENT/*height*/);//~1902R~
   		isConstructor=true;                                        //~vaygI~
        setFullWidth();                                            //~1902R~
   		isConstructor=false;                                       //~vaygI~
        setContentView(layoutView);                                //~1902R~
	    setOnKeyListener(new OnKeyListener()                       //~1A08I~
        						{                                  //~1A08I~
                                @Override	                       //~1A08I~
                                public boolean onKey(DialogInterface dialog,int Pkeycode,KeyEvent Pevent)//~1A08I~
                                	{
                                	return AxeKbdDialog.this.onKey(Pkeycode,Pevent); //~1A08I~
                                	}
        						}    //~1A08I~
                        );                                         //~1A08I~
		setCancelByOutsideTouch(AxeG.cancelXekbdByOutsideTouch); //lose focus when touch outside but remains on foreground//~vaihI~
    }                                                              //~1902R~
//*****************************************                        //~vaihI~
	public void setCancelByOutsideTouch(boolean Pcancel)           //~vaihI~
    {                                                              //~vaihI~
        setCanceledOnTouchOutside(Pcancel);                        //~vaihI~
	    setModeless(!Pcancel);                                     //~vaiiI~
    }                                                              //~vaihI~
//*****************************************                        //~vaatR~
//*if AxeKbdDialog was instanciated                                //~vaygI~
//*from AxeIME<--AxeScreen:replaceBitmap<--AxeView                 //~vaygR~
//*****************************************                        //~vaatR~
    public void orientationChanged()                               //~vaatR~
    {                                                              //~vaatR~
        if (Dump.Y) Dump.println("AxeKbdDialog:orientationChanged");//~vaatR~
        View v=reinitKbd();                                        //~vaatR~
        if (v!=null)                                               //~vaatI~
        {                                                          //~vaatI~
        	frameLayout.removeView(kbdView);                       //~vaatI~
	        frameLayout.addView(v);                                //~vaatR~
            kbdView=v;                                             //~vaatI~
	        setFullWidth();	                                       //~vaygM~
        }                                                          //~vaatI~
    }                                                              //~vaatR~
//*****************************************                        //~vaatR~
	private View initKbd()                                         //~1902I~
    {                                                              //~1902I~
    	axeSoftKbd=new AxeSoftKbd(this);                           //~1919R~
    	axeSoftKbd.setSoftKbdListener(this);	//callback sendkey //~1919R~
        axeSoftKbd.onInitializeInterface();                        //~1919R~
        View v=axeSoftKbd.onCreateInputView();                     //~1919R~
        updateByPreference();                                      //~1920I~
        return v;                           //AxeKbdView           //~1919R~
    }                                                              //~1902I~
//*****************************************                        //~vaatR~
	private View reinitKbd()                                       //~vaatR~
    {                                                              //~vaatR~
        if (!axeSoftKbd.onInitializeInterface())                   //~vaatR~
        	return null;                                          //~vaatI~
        View v=axeSoftKbd.onCreateInputView();                     //~vaatR~
        updateByPreference();                                      //~vaatR~
        return v;                           //AxeKbdView           //~vaatR~
    }                                                              //~vaatR~
//*****************************************                        //~vaatR~
	private void updateByPreference()                              //~1920I~
    {                                                              //~1920I~
    	int [][] prefData=AxeLstKbdLayout.loadPreference(getKbdLayoutCodeTbl());//~1923R~
        if (prefData!=null)                                        //~1920I~
        {                                                          //~1923I~
	    	axeSoftKbd.updateKeys(prefData);                       //~1920R~
        }                                                          //~1923I~
    }                                                              //~1920I~
    public void showKbd()                                               //~1902I~
    {                                                              //~1902I~
    	if (Dump.Y) Dump.println("showKbd isShown="+isShown);      //~1919R~
        if (isShown)                                               //~1919I~
        	return;                                                 //~1919I~
//        WindowManager.LayoutParams lp=new LayoutParams();        //~1902R~
//        lp.copyFrom(dialogKbd.getWindow().getAttributes());      //~1902R~
//        lp.width=WindowManager.LayoutParams.FILL_PARENT;         //~1902R~
        setOnDismissListener((OnDismissListener) new dismissListener());//~1917I~
        show();                                                    //~1902R~
        isShown=true;                                              //~1919I~
        AxeG.axeScreen.requestFocus();  //lose kbd focus once      //~vaifI~
//      dialogKbd.getWindow().setLayout(MATCH_PARENT, WRAP_CONTENT);//~1902R~
//      dialogKbd.getWindow().setAttributes(lp);                   //~1902R~
    }                                                              //~1902I~
//*********************************                                //~vaiiI~
    private void setModeless(boolean Pmodeless)                    //~vaiiI~
    {                                                              //~vaiiI~
    	if (Pmodeless)                                             //~vaiiI~
	        getWindow().addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL);//~vaihI~//~vaiiI~
        else                                                       //~vaiiI~
	        getWindow().clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL);//~vaiiI~
    }                                                              //~vaiiI~
//*********************************                                //~1A08R~
//*to process hard keyboard input                                  //~1A08I~
//*********************************                                //~1A08I~
    @Override                                                      //~1A08R~
    public boolean onKeyDown(int Pkeycode,KeyEvent Pevent)         //~1A08R~
    {                                                              //~1A08R~
    	boolean rc;                                                //~1A08R~
    //**********************                                       //~1A08R~
        if (Dump.Y) Dump.println("AxeKbdDialog dialog onkeyDown keycode="+Integer.toHexString(Pkeycode));//~1A08R~
        if (Pkeycode==AxeKeyValue.AKC_BACK)                        //~1A08R~
        	return false;                                          //~1A08I~
		rc=AxeG.axeKeyAction.onKeyDown(Pkeycode,Pevent);           //~1A08R~
        if (Dump.Y) Dump.println("AxeKbdDialog dialog onkeyDown rc="+rc);//~1A08I~
        return rc;                                                 //~1A08R~
    }                                                              //~1A08R~
    @Override                                                      //~1A08R~
    public boolean onKeyUp(int Pkeycode,KeyEvent Pevent)           //~1A08R~
    {                                                              //~1A08R~
    	boolean rc;                                                //~1A08I~
    //**********************                                       //~1A08R~
        if (Dump.Y) Dump.println("AxeKbdDialog dialog onkeyUp keycode="+Integer.toHexString(Pkeycode));//~1A08R~
        if (Pkeycode==KeyEvent.KEYCODE_BACK)                       //~1A08R~
        {                                                          //~1A08I~
              if (!axeSoftKbd.dismissMiniKeyboardOnScreen())//no popup minikbd//~1A08R~
                  dismiss();                                       //~1A08R~
        	return false;                                          //~1A08I~
        }                                                          //~1A08I~
		rc=AxeG.axeKeyAction.onKeyDown(Pkeycode,Pevent);           //~1A08I~
        if (Dump.Y) Dump.println("AxeKbdDialog dialog onkeyUp rc="+rc);//~1A08I~
        return rc;                                                 //~1A08R~
    }                                                              //~1A08R~
                                                         //~1A08I~
    public boolean onKey(/*DialogInterface Pdialog,*/int Pkeycode,KeyEvent Pevent)//~1A08R~
    {                                                              //~1A08R~
    	boolean rc;                                                //~1A08I~
    //**********************                                       //~1A08R~
        if (Dump.Y) Dump.println("AxeKbdDialog dialog onkey keycode="+Integer.toHexString(Pkeycode));//~1A08R~
        if (Pkeycode==KeyEvent.KEYCODE_BACK)                       //~1A08I~
        	return false;                                          //~1A08I~
//        int modflag=axeSoftKbd.getMetaStatus(); //softkbd metastatus shifted flag//~1A08R~
		boolean shortcut=axeSoftKbd.isShortcut();                  //~1A10I~
		rc=AxeG.axeKeyAction.onKeyFromDialog(Pkeycode,Pevent,shortcut);//~1A10R~
        if (shortcut)                                              //~1A10I~
			axeSoftKbd.setShortcut(false);                         //~1A10I~
        if (Dump.Y) Dump.println("AxeKbdDialog dialog onkey rc="+rc);//~1A08I~
        return rc;                                                 //~1A08R~
    }                                                              //~1A08R~
//*****************************************************            //~1902I~
//*copy from inutmethodservice/SoftInputWindow.java                //~1902I~
//*****************************************************            //~1902I~
/*                                                                 //~1902I~
 * Copyright (C) 2007-2008 The Android Open Source Project         //~1902I~
 *                                                                 //~1902I~
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not//~1902I~
 * use this file except in compliance with the License. You may obtain a copy of//~1902I~
 * the License at                                                  //~1902I~
 *                                                                 //~1902I~
 * http://www.apache.org/licenses/LICENSE-2.0                      //~1902I~
 *                                                                 //~1902I~
 * Unless required by applicable law or agreed to in writing, software//~1902I~
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT//~1902I~
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the//~1902I~
 * License for the specific language governing permissions and limitations under//~1902I~
 * the License.                                                    //~1902I~
 */                                                                //~1902I~
                                                                   //~1902I~
//package android.inputmethodservice;                              //~1902I~
                                                                   //~1902I~
//import android.app.Dialog;                                       //~1902I~
//import android.content.Context;                                  //~1902I~
//import android.content.pm.ActivityInfo;                          //~1902I~
//import android.os.IBinder;                                       //~1902I~
//import android.view.Gravity;                                     //~1902I~
//import android.view.KeyEvent;                                    //~1902I~
//import android.view.WindowManager;                               //~1902I~
                                                                   //~1902I~
/**                                                                //~1902I~
 * A SoftInputWindow is a Dialog that is intended to be used for a top-level input//~1902I~
 * method window.  It will be displayed along the edge of the screen, moving//~1902I~
 * the application user interface away from it so that the focused item is//~1902I~
 * always visible.                                                 //~1902I~
 */                                                                //~1902I~
//class SoftInputWindow extends Dialog {                           //~1902I~
//    final KeyEvent.DispatcherState mDispatcherState;             //~1902I~
                                                                   //~1902I~
//    public void setToken(IBinder token) {                        //~1902I~
//        WindowManager.LayoutParams lp = getWindow().getAttributes();//~1902I~
//        lp.token = token;                                        //~1902I~
//        getWindow().setAttributes(lp);                           //~1902I~
//    }                                                            //~1902I~
                                                                   //~1902I~
    /**                                                            //~1902I~
     * Create a DockWindow that uses a custom style.               //~1902I~
     *                                                             //~1902I~
     * @param context The Context in which the DockWindow should run. In//~1902I~
     *        particular, it uses the window manager and theme from this context//~1902I~
     *        to present its UI.                                   //~1902I~
     * @param theme A style resource describing the theme to use for the window.//~1902I~
     *        See <a href="{@docRoot}reference/available-resources.html#stylesandthemes">Style//~1902I~
     *        and Theme Resources</a> for more information about defining and//~1902I~
     *        using styles. This theme is applied on top of the current theme in//~1902I~
     *        <var>context</var>. If 0, the default dialog theme will be used.//~1902I~
     */                                                            //~1902I~
//    public SoftInputWindow(Context context, int theme,             //~1902I~
//            KeyEvent.DispatcherState dispatcherState) {            //~1902I~
//        super(context, theme);                                     //~1902I~
//        mDispatcherState = dispatcherState;                        //~1902I~
//        initDockWindow();                                          //~1902I~
//    }                                                              //~1902I~
                                                                   //~1902I~
//    @Override                                                    //~1902I~
//    public void onWindowFocusChanged(boolean hasFocus) {         //~1902I~
//        super.onWindowFocusChanged(hasFocus);                    //~1902I~
//        mDispatcherState.reset();                                //~1902I~
//    }                                                            //~1902I~
                                                                   //~1902I~
    /**                                                            //~1902I~
     * Get the size of the DockWindow.                             //~1902I~
     *                                                             //~1902I~
     * @return If the DockWindow sticks to the top or bottom of the screen, the//~1902I~
     *         return value is the height of the DockWindow, and its width is//~1902I~
     *         equal to the width of the screen; If the DockWindow sticks to the//~1902I~
     *         left or right of the screen, the return value is the width of the//~1902I~
     *         DockWindow, and its height is equal to the height of the screen.//~1902I~
     */                                                            //~1902I~
    public int getSize() {                                         //~1902I~
        WindowManager.LayoutParams lp = getWindow().getAttributes();//~1902R~
                                                                   //~1902I~
        if (lp.gravity == Gravity.TOP || lp.gravity == Gravity.BOTTOM) {//~1902I~
            return lp.height;                                      //~1902I~
        } else {                                                   //~1902I~
            return lp.width;                                       //~1902I~
        }                                                          //~1902I~
    }                                                              //~1902I~
                                                                   //~1902I~
    /**                                                            //~1902I~
     * Set the size of the DockWindow.                             //~1902I~
     *                                                             //~1902I~
     * @param size If the DockWindow sticks to the top or bottom of the screen,//~1902I~
     *        <var>size</var> is the height of the DockWindow, and its width is//~1902I~
     *        equal to the width of the screen; If the DockWindow sticks to the//~1902I~
     *        left or right of the screen, <var>size</var> is the width of the//~1902I~
     *        DockWindow, and its height is equal to the height of the screen.//~1902I~
     */                                                            //~1902I~
    public void setSize(int size) {                                //~1902I~
        WindowManager.LayoutParams lp = getWindow().getAttributes();//~1902R~
                                                                   //~1902I~
        if (lp.gravity == Gravity.TOP || lp.gravity == Gravity.BOTTOM) {//~1902I~
            lp.width = -1;                                         //~1902I~
            lp.height = size;                                      //~1902I~
        } else {                                                   //~1902I~
            lp.width = size;                                       //~1902I~
            lp.height = -1;                                        //~1902I~
        }                                                          //~1902I~
        getWindow().setAttributes(lp);                             //~1902R~
    }                                                              //~1902I~
                                                                   //~1902I~
    /**                                                            //~1902I~
     * Set which boundary of the screen the DockWindow sticks to.  //~1902I~
     *                                                             //~1902I~
     * @param gravity The boundary of the screen to stick. See {#link//~1902I~
     *        android.view.Gravity.LEFT}, {#link android.view.Gravity.TOP},//~1902I~
     *        {#link android.view.Gravity.BOTTOM}, {#link          //~1902I~
     *        android.view.Gravity.RIGHT}.                         //~1902I~
     */                                                            //~1902I~
    public void setGravity(int gravity) {                          //~1902I~
        WindowManager.LayoutParams lp = getWindow().getAttributes();//~1902R~
                                                                   //~1902I~
        boolean oldIsVertical = (lp.gravity == Gravity.TOP || lp.gravity == Gravity.BOTTOM);//~1902I~
                                                                   //~1902I~
        lp.gravity = gravity;                                      //~1902I~
                                                                   //~1902I~
        boolean newIsVertical = (lp.gravity == Gravity.TOP || lp.gravity == Gravity.BOTTOM);//~1902I~
                                                                   //~1902I~
        if (oldIsVertical != newIsVertical) {                      //~1902I~
            int tmp = lp.width;                                    //~1902I~
            lp.width = lp.height;                                  //~1902I~
            lp.height = tmp;                                       //~1902I~
            getWindow().setAttributes(lp);                         //~1902R~
        }                                                          //~1902I~
    }                                                              //~1902I~
                                                                   //~1902I~
    private void initDockWindow() {                                //~1902I~
        WindowManager.LayoutParams lp = getWindow().getAttributes();//~1902R~
                                                                   //~1902I~
//      lp.type = WindowManager.LayoutParams.TYPE_INPUT_METHOD;    //~1902R~
        lp.type = WindowManager.LayoutParams.TYPE_APPLICATION_PANEL;//~1902I~
//      lp.setTitle("InputMethod");                                //~1902R~
                                                                   //~1902I~
        lp.gravity = Gravity.BOTTOM;                               //~1902I~
        lp.width = -1;                                             //~1902I~
        // Let the input method window's orientation follow sensor based rotation//~1902I~
        // Turn this off for now, it is very problematic.          //~1902I~
        //lp.screenOrientation = ActivityInfo.SCREEN_ORIENTATION_USER;//~1902I~
                                                                   //~1902I~
        getWindow().setAttributes(lp);                             //~1902R~
        getWindow().setFlags(                                      //~1902R~
                WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN | //~1902I~
                WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,     //~1902I~
                WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN | //~1902I~
                WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE |    //~1902I~
                WindowManager.LayoutParams.FLAG_DIM_BEHIND);       //~1902I~
    }                                                              //~1902I~
    private void setFullWidth()                                    //~1902R~
    {                                                              //~1902I~
		Window w=getWindow();                                      //~1902R~
   	  if (isConstructor)                                           //~vaygI~
        w.requestFeature(Window.FEATURE_NO_TITLE);                 //~1902M~
        if (Dump.Y) Dump.println("kbd H="+((AxeKbdView)kbdView).mKeyboard.mTotalHeight);//~vaycM~
        if (Dump.Y) Dump.println("kbd W="+((AxeKbdView)kbdView).mKeyboard.mTotalWidth);//~vaycM~
        int hh=((AxeKbdView)kbdView).mKeyboard.mTotalHeight;       //~vaycI~
        int ww=((AxeKbdView)kbdView).mKeyboard.mTotalWidth;        //~vaycI~
      if (AxeG.displayPL==AxeG.LANDSCAPE && hh>0 && ww>0) //landscape//~vaycR~
      {                                                            //~vaycI~
        WindowManager.LayoutParams lp = getWindow().getAttributes();//~vaycI~
        lp.gravity = Gravity.BOTTOM;                               //~vaycI~
        lp.width = -1;                                             //~vaycI~
        lp.height=hh+2;//2:paddingTop                              //~vaycR~
        w.setAttributes(lp);                                       //~vaycR~
        if (Dump.Y) Dump.println("AxeKbdDilaog setfullwidth hh="+lp.height);//~vaycI~
      }                                                            //~vaycI~
      else                                                         //~vaycI~
      {                                                            //~vaycI~
        w.setGravity(Gravity.BOTTOM|Gravity.FILL_HORIZONTAL);      //~1902I~
//      w.setLayout(ViewGroup.LayoutParams.FILL_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);//~vaycR~
        w.setLayout(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);//~vaycM~
//      w.addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);    //~1902R~
//        w.requestWindowFeature(Window.FEATURE_NO_TITLE);           //~1902I~
	  }                                                            //~vaycI~
    }                                                              //~1902I~
//}//SoftInputWindow class                                         //~1902I~
                                                //~1917I~
//****************************************                                  //~1326I~//~1917I~
//*dismiss listener to start default ime                           //~1919R~
//****************************************                         //~1326I~//~1917I~
    public class dismissListener                                   //~1917I~
    		implements OnDismissListener                           //~1917I~
	{                                                              //~1917I~
        @Override                                                  //~1917I~
        public void onDismiss(DialogInterface Pdialog)             //~1917I~
        {                                                          //~1917I~
			if (Dump.Y) Dump.println("dialog dismiss listener"); //~1326I~//~1917I~
        if (Dump.Y) Dump.println("kbdview W="+kbdView.getWidth()+",H="+kbdView.getHeight());//~vaycR~
        if (Dump.Y) Dump.println("frame W="+frameLayout.getWidth()+",H="+frameLayout.getHeight());//~vaybM~
        WindowManager.LayoutParams lp = getWindow().getAttributes();//~vaycI~
        if (Dump.Y) Dump.println("dialog dismiss hh="+lp.height);  //~vaycR~
//            if (modeChange)                                      //~1A08R~
//            {                                                    //~1A08R~
//                modeChange=false;                                //~1A08R~
//                showKbdDelayed();                                //~1A08R~
//            }                                                    //~1A08R~
	        isShown=false;                                         //~1919I~
        }                                                          //~1917I~
    }                                                              //~1917I~
    public void startIME()                                         //~1918I~
    {                                                              //~1918R~
    	modeChange=true;                                           //~1918I~
//        dismiss();                                               //~1A08R~
    	showKbdDelayed();                                          //~1A08I~
    }                                                              //~1918I~
    public void showKbdDelayed()                                   //~1917I~
    {                                                              //~1917I~
    	if (Dump.Y) Dump.println("AxeIME showKbdDelayed");          //~1917I~
        new AxeTimer(this/*callback*/,100/*milisec delay*/,false/*repeat*/,null/*parameter*/).start();//~1917I~
	}                                                              //~1917I~
    @Override                                                      //~1917I~
    public void onTimerExpired(AxeTimer Ptimer,int Pcallctr,Object Pparm)//~1917I~
    {                                                              //~1917I~
    	if (Dump.Y) Dump.println("AxeIME onTimerEvent expired");   //~1917I~
        AxeG.axeIME.showKbdP();	                                   //~1918I~
    }                                                              //~1917I~
    @Override	//callback from AxeSoftKbd                         //~1A10R~
	public void sendSoftKbdKey(int Pkeycode,int Pmetaflag,boolean Pshortcut)//~1A10R~
    {                                                              //~1918I~
    	if (Dump.Y) Dump.println("AxeKbdDialog:sendKey callback metastate="+Integer.toHexString(Pmetaflag)+",code="+Integer.toHexString(Pkeycode)+",shortcut="+Pshortcut);//~1A10R~
        AxeG.axeKeyAction.sendSoftKbdInput(Pkeycode,Pmetaflag,Pshortcut);//~1A10R~
    }                                                              //~1918I~
//******************************                                   //~1919I~
//*from AxeLstKbdLayout                                            //~1919I~
//******************************                                   //~1919I~
//    public String[][] getKbdLayoutTbl()                          //~1919R~
//    {                                                            //~1919R~
//        return axeSoftKbd.getKbdLayoutTbl();                     //~1919R~
//    }                                                            //~1919R~
	public int[][] getKbdLayoutCodeTbl()                        //~1919I~
    {                                                              //~1919I~
    	return axeSoftKbd.getKbdLayoutCodeTbl();                   //~1919I~
    }                                                              //~1919I~
	public int getKbdSize()                                        //~1919I~
    {                                                              //~1919I~
    	return axeSoftKbd.getKbdSize();                            //~1919I~
    }                                                              //~1919I~
	public void updateKbd(int[][] Pnewtbl)                          //~1920I~
    {                                                              //~1920I~
    	axeSoftKbd.updateKeys(Pnewtbl);                            //~1920I~
    }                                                              //~1920I~
//***********************************************                  //~vaagI~
//*AxeDlgArmOption: display flickkey toggled                       //~vaagI~
//***********************************************                  //~vaagI~
	public void invalidateAllKeys()                                //~vaagI~
    {                                                              //~vaagI~
    	axeSoftKbd.invalidateAllKeys();                            //~vaagI~
    }                                                              //~vaagI~
}
