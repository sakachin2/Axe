//*CID://+vaatR~: update#= 211;                                    //~vaatR~
//**********************************************************************//~1107I~
//vaat:120103 (Axe:Bug)xekbd should support orientaion change      //~vaatI~
//vaag:111223 (Axe)display small char generated by flick on keyboard key//~vaagI~
//**********************************************************************//~vaagI~
//*AlerDialog                                                      //~1527R~
//**********************************************************************//~1107I~
package com.xe.Axe;                                         //~1107R~  //~1108R~//~1527R~

import java.io.IOException;
import java.util.List;

import org.xmlpull.v1.XmlPullParserException;

import com.xe.Axe.kbd.AxeKbdDialog;

import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.content.pm.ServiceInfo;
import android.provider.Settings;
import android.text.InputType;
import android.view.View;
import android.view.inputmethod.BaseInputConnection;
import android.view.inputmethod.EditorInfo;
import android.view.inputmethod.InputConnection;
import android.view.inputmethod.InputMethod;
import android.view.inputmethod.InputMethodInfo;
import android.view.inputmethod.InputMethodManager;

//**********************************************************************//~1107I~
public class AxeIME implements AxeTimerI                                                //~1826R~
{                                                                  //~0914I~
	private InputMethodManager imm;                                //~va15I~//~1825I~//~1826I~
//    private CanvasInputConnection inputConnection;                 //~1826I~
    private View view;                                             //~1826R~
    public boolean useKbdXe=true;                                  //~1919I~
    private AxeKbdDialog axeKbdDialog;                             //~1919I~
    private boolean swKbdPDelayed;                                         //~vaatI~
//**********************************                               //~1211I~
	public AxeIME(AxeScreen PaxeScreen)                            //~1826R~
    {                                                              //~1612I~
    	view=PaxeScreen;	//AxeScreen                            //~1826R~
    	imm=(InputMethodManager)AxeG.context.getSystemService(Context.INPUT_METHOD_SERVICE);//~va15I~//~1825I~//~1826I~
//        inputConnection=new CanvasInputConnection();                //~1826I~
//      hideKbd(view);	//initialy hide remaining                  //~1827R~
    }                                                              //~1612I~
//**********************************                               //~1826I~
	public void changeIME()                                        //~1826I~
    {                                                              //~1826I~
        imm.showInputMethodPicker();                               //~1826I~
    }                                                              //~1826I~
//***************************                                      //~1826I~//~1827I~
    public InputConnection createInputConnection(EditorInfo outAttrs)//~1826I~//~1827I~
    {                                                          //~1826I~//~1827I~
        if (Dump.Y) Dump.println("AxeIME:CreateInputConnection imeoption="+outAttrs.imeOptions+",inputtype="+outAttrs.inputType);//~1826I~//~1827I~//~vaatR~
        CanvasInputConnection cic=new CanvasInputConnection();//~1826I~//~1827I~
        outAttrs.actionLabel=null;    //label for command      //~1826I~//~1827I~
        outAttrs.inputType=InputType.TYPE_CLASS_TEXT;   //String type//~1826I~//~1827I~
        outAttrs.imeOptions=EditorInfo.IME_ACTION_SEND             //~1830R~
//                         |0x02000000 //Api11:EditorInfo.IME_FLAG_NO_FULLSCREEN;api11//~1830I~//~vaatR~
                           |EditorInfo.IME_FLAG_NO_FULLSCREEN     //~vaatI~
                           |EditorInfo.IME_FLAG_NO_ENTER_ACTION;   //~1829I~
        if (Dump.Y) Dump.println("AxeIME.createInputConnection +imeoption="+outAttrs.imeOptions+",inputtype="+outAttrs.inputType);//~vaatI~
        return (InputConnection) cic;                                           //~1826I~//~1827I~
    }                                                          //~1826I~//~1827I~
//**********************************
//*InputConnection class                                           //~1826I~
//**********************************                               //~1826I~
    public class CanvasInputConnection extends BaseInputConnection //~1826I~
    {                                                              //~1826I~
        public CanvasInputConnection()                             //~1826I~
        {                                                          //~1826I~
            super(view,false/*fulleditor*/);                 //~1826I~
        }                                                          //~1826I~
//*************************************************                //~1827I~
//*default commitText() send keyevent(multiString)                 //~1827I~
//*************************************************                //~1827I~
//        @Override                                                  //~1826I~//~1827R~
//        public boolean commitText(CharSequence Ptext,int Pnewcursorpos)//~1826I~//~1827R~
//        {                                                          //~1826I~//~1827R~
//            boolean rc=true;                                            //~1826I~//~1827R~
//            String text;                                           //~1826I~//~1827R~
//        //***********************                                  //~1826I~//~1827R~
//            if (Dump.Y) Dump.println("AxeIME:commitText cursorpos="+Pnewcursorpos);//~1826I~//~1827R~
//            return super.commitText(Ptext,Pnewcursorpos);              //~1826I~//~1827R~
// //            text=Ptext.toString();                                 //~1826I~//~1827R~
////            if (Dump.Y) Dump.println("commitText="+text);          //~1826I~//~1827R~
////            sendString(text);                                  //~1827R~
////            return rc;                                             //~1826I~//~1827R~
//        }                                                          //~1826I~//~1827R~
    }                                                              //~1826I~
    //*******************************                              //~1827I~
    //kbdmsg is heavy work causing timeout                         //~1827I~
    // err InputConnectionWrapper:Timed out waiting IInputConectionTextCallback//~1827I~
    //*******************************                              //~1827I~
//    private void sendString(String Ptext)                          //~1827I~
//    {                                                              //~1827I~
//        KeyEvent event=new KeyEvent(SystemClock.uptimeMillis(),  //copy from BaseInputConnection.java//~1827I~
//                    Ptext,KeyCharacterMap.BUILT_IN_KEYBOARD,0/*flags*/);//~1827I~
//        inputConnection.sendKeyEvent(event);                       //~1827R~
//    }                                                              //~1827I~
    //*******************************                              //~1826I~
    public void showKbd()                                          //~1826I~
    {                                                              //~1826I~
//  	if ((AxeG.imeType & AxeG.IMETYPE_NOCONFIRM)==0)            //~1830R~
//      	AxeDlgImeType.show();                                  //~1830R~
//      else                                                       //~1830R~
			showKbd(true,false/*preedit*/);                          //~1830R~
	}                                                              //~1826I~
    public void showKbdP() //with preedit                          //~1830I~
    {                                                              //~1830I~
//  	if ((AxeG.imeType & AxeG.IMETYPE_NOCONFIRM)==0)            //~1830I~
//      	AxeDlgImeType.show();                                  //~1830I~
//      else                                                       //~1830I~
			showKbd(true,true/*preedit*/);                         //~1830I~
	}                                                              //~1830I~
//*************************                                        //~1919I~
    public void showKbd(boolean Pconfirmed,boolean Ppreedit)      //~1830R~
    {                                                              //~1826I~
    	if (Dump.Y) Dump.println("AxeIME showKbd confirmed="+Pconfirmed+",preedit="+Ppreedit);//~1830R~
//  	if ((AxeG.imeType & AxeG.IMETYPE_DIALOG)!=0)               //~1830R~
    	if (Ppreedit)                                              //~1830I~
	    	AxeDlgImePreedit.showDialog();                               //~1826I~
        else                                                       //~1826I~
        	if (useKbdXe)                                          //~1919I~
				showXeKbd(view);	//AxeKbd                       //~1919I~
            else                                                   //~1919I~
				showDefaultKbd(view);	//AxeScreen                                         //~1826R~//~1919R~
	}                                                              //~1826I~
//*************************                                        //~1919I~
    private void showXeKbd(View Pview)                              //~1919I~//~vaatR~
    {                                                              //~1919I~
    	if (Dump.Y) Dump.println("AxeIME showXeKbd");              //~1919I~
        if (axeKbdDialog==null)                                    //~1919I~
	    	axeKbdDialog=new AxeKbdDialog(AxeG.context);           //~1919I~
		axeKbdDialog.showKbd();                                    //~1919I~
    }                                                              //~1919I~
//*************************                                        //~1919I~
    public AxeKbdDialog getXeKbd()                                 //~1919I~
    {                                                              //~1919I~
    	if (Dump.Y) Dump.println("AxeIME getXeKbd");               //~1919I~
        if (axeKbdDialog==null)                                    //~1919I~
	    	axeKbdDialog=new AxeKbdDialog(AxeG.context);           //~1919I~
        return axeKbdDialog;                                       //~1919I~
    }                                                              //~1919I~
//*************************                                        //~1919I~
    public AxeKbdDialog getXeKbd(boolean Pcreate)                  //~vaagI~
    {                                                              //~vaagI~
    	if (Pcreate)                                               //~vaagI~
			return getXeKbd();                                     //~vaagI~
        return axeKbdDialog;                                       //~vaagI~
    }                                                              //~vaagI~
//*************************                                        //~vaagI~
    public boolean showDefaultKbd(View Pview/*IME destination View*/)//~1919R~
    {                                                              //~1826I~
    	boolean rc;                                                //~1827I~
		rc=imm.showSoftInput(Pview,InputMethodManager.SHOW_FORCED);   //~1826I~//~1827R~
    	if (Dump.Y) Dump.println("AxeIME.showDefaultKbd showKbd rc="+rc+",view="+Pview.toString());//~1827I~//~vaatR~
    	return rc;
    }                                                              //~1826I~
//*************************                                        //~vaatI~
    public void showKbdPDelayed()                                  //~vaatR~
    {                                                              //~vaatI~
    	if (Dump.Y) Dump.println("AxeIME.showKbdPDelayed");        //~vaatI~
        swKbdPDelayed=true;                                        //~vaatI~
        new AxeTimer(this/*callback*/,100/*milisec delay*/,false/*repeat*/,null/*parameter*/).start();//~vaatI~
	}                                                              //~vaatI~
//*************************                                        //~1827I~
    public void showKbdDelayed(View Pview)                         //~1827I~
    {                                                              //~1827I~
    	if (Dump.Y) Dump.println("AxeIME.showKbdDelayed view="+Pview.toString());//~1827I~//~vaatR~
        new AxeTimer(this/*callback*/,100/*milisec delay*/,false/*repeat*/,Pview/*parameter*/).start();//~1827R~
	}                                                              //~1827I~
    @Override                                                      //~1827I~
    public void onTimerExpired(AxeTimer Ptimer,int Pcallctr,Object Pparm)  //~1827I~
    {                                                              //~1827I~
    	if (Dump.Y) Dump.println("AxeIME.onTimerExpired showSoftInput view="+Pparm+",swKbdPDelayed="+swKbdPDelayed);//~1827R~//+vaatR~
        if (swKbdPDelayed)                                         //~vaatI~
        {                                                          //~vaatI~
	        swKbdPDelayed=false;                                   //~vaatI~
    		showKbdP(); //with preedit                             //~vaatI~
            return;                                                //~vaatI~
        }                                                          //~vaatI~
		showDefaultKbd((View)Pparm);                                //~1919R~
    }                                                              //~1827I~
//*************************                                        //~1827I~
    public void showKbdRequest()                                   //~1827I~
    {                                                              //~1827I~
    	if (Dump.Y) Dump.println("AxeIME showKbdRequest");//~1827I~
		AxeG.axeScreen.showKbdRequest();                           //~1827I~
	}                                                              //~1827I~
    //*******************************                              //~1826I~
    public void hideKbd(View Pview)                                //~1826I~//~1827R~
    {                                                              //~1826I~
//        if (isActive(Pview))//~va15I~                                   //~1826I~//~1827R~
//        {                                                        //~1827R~
	        if (Dump.Y) Dump.println("AxeIME hidekbd");            //~1827I~
			imm.hideSoftInputFromWindow(Pview.getWindowToken(),0);    //~va15I~//~1826I~//~1827R~
//        }                                                        //~1827R~
	}                                                              //~1826I~
////*************                                                    //~va15I~//~1826M~//~1827R~
//    public boolean isActive(View Pview)                                      //~va15I~//~1826M~//~1827R~
//    {                                                              //~va15I~//~1826M~//~1827R~
//        boolean rc=imm.isActive(Pview); //no usablility         //~va15R~//~1826I~//~1827R~
//        if (Dump.Y) Dump.println("AxeIME isActive="+rc+",view="+Pview.toString());                  //~va15R~//~1826M~//~1827R~
//        return rc;//~va15I~                                        //~1826M~//~1827R~
//    }                                                              //~va15I~//~1826M~//~1827R~
    public static String getCurrentIME()                           //~1830I~
    {                                                              //~1830I~
//  	String defime2=Settings.Secure.getString(this.getContentResolver(),Settings.Secure.ENABLED_INPUT_METHODS);  //all IME//~1830I~
    	String defime=Settings.Secure.getString(AxeG.context.getContentResolver(),Settings.Secure.DEFAULT_INPUT_METHOD);//~1830I~
		if (Dump.Y) Dump.println("AxeIME getCurrentIME="+defime);  //~1830I~
        String label=loadLabel(defime);                            //~1831I~
        if (label!=null)                                           //~1831I~
        	return label;                                          //~1831I~
        int pos=defime.lastIndexOf('/');                           //~1830I~
        if (pos>0)                                                 //~1830I~
        {                                                          //~1830I~
            pos++;                                                 //~1830I~
            if (pos<defime.length() && defime.charAt(pos)=='.')      //~1830I~
                pos++;                                             //~1830I~
            if (pos<defime.length())                                 //~1830I~
            	defime=defime.substring(pos);                      //~1830I~
        }                                                          //~1830I~
		if (Dump.Y) Dump.println("AxeIME getCurrentIME returns="+defime);//~1830I~
        return defime;                                             //~1830I~
    }                                                              //~1830I~
//*****************************************                        //~1831I~
//*from InputMethodManagerService.java                             //~1831I~
//*****************************************                        //~1831I~
    public static String loadLabel(String Pimeid)                         //~1831I~
    {                                                              //~1831I~
    //********************                                         //~1831I~
        PackageManager pm = AxeG.context.getPackageManager();      //~1831I~
        List<ResolveInfo> services = pm.queryIntentServices(       //~1831I~
                new Intent(InputMethod.SERVICE_INTERFACE),         //~1831I~
                PackageManager.GET_META_DATA);                     //~1831I~
        for (int i = 0; i < services.size(); ++i)                  //~1831I~
        {                                                          //~1831I~
            ResolveInfo ri = services.get(i);                      //~1831I~
            ServiceInfo si = ri.serviceInfo;                       //~1831I~
            if (!android.Manifest.permission.BIND_INPUT_METHOD.equals(//~1831I~
                    si.permission)) {                              //~1831I~
                continue;                                          //~1831I~
            }                                                      //~1831I~
            try                                                    //~1831I~
            {                                                      //~1831I~
                InputMethodInfo p = new InputMethodInfo(AxeG.context, ri);//~1831I~
                final String id = p.getId();                       //~1831I~
                if (Dump.Y) Dump.println("Curr IMEid="+Pimeid+",enabled="+id);//~1831I~
                if (id.equals(Pimeid))                             //~1831I~
                {                                                  //~1831I~
                	String label=p.loadLabel(pm).toString();                  //~1831I~
	                if (Dump.Y) Dump.println("label="+label);      //~1831I~
                	return label;                                  //~1831I~
                }                                                  //~1831I~
            }                                                      //~1831I~
            catch (XmlPullParserException e)                       //~1831I~
            {                                                      //~1831I~
            }                                                      //~1831I~
            catch (IOException e)                                  //~1831I~
            {                                                      //~1831I~
            }                                                      //~1831I~
        }                                                          //~1831I~
        return null;                                               //~1831I~
    }                                                              //~1831I~
//*****************************************                        //~vaatI~
//*from AxeScreen                                                  //~vaatI~
//*****************************************                        //~vaatI~
    public void orientationChanged()                               //~vaatI~
    {                                                              //~vaatI~
        if (Dump.Y) Dump.println("AxeIME:orientationChanged");     //~vaatR~
    	if (axeKbdDialog!=null)                                    //~vaatI~
        {                                                          //~vaatI~
            axeKbdDialog.orientationChanged();                     //~vaatI~
        }                                                          //~vaatI~
    }                                                              //~vaatI~
}//class                                                           //~1612R~
